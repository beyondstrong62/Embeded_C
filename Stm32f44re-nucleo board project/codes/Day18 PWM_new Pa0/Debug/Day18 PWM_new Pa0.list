
Day18 PWM_new Pa0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000026c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000430  08000438  00001438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000430  08000430  00001438  2**0
                  CONTENTS
  4 .ARM          00000000  08000430  08000430  00001438  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000430  08000438  00001438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000430  08000430  00001430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000434  08000434  00001434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  08000438  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000438  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000600  00000000  00000000  00001468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000024e  00000000  00000000  00001a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000098  00000000  00000000  00001cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000063  00000000  00000000  00001d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ba10  00000000  00000000  00001db3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000ac6  00000000  00000000  0000d7c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00041894  00000000  00000000  0000e289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0004fb1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000015c  00000000  00000000  0004fb60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0004fcbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000418 	.word	0x08000418

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000418 	.word	0x08000418

08000204 <main>:

void PA0_PWM_Config(void);
void TIM2_PWM_Config(void);
void delay(uint32_t delay);

int main(void) {
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
    PA0_PWM_Config();
 800020a:	f000 f821 	bl	8000250 <PA0_PWM_Config>
    TIM2_PWM_Config();
 800020e:	f000 f849 	bl	80002a4 <TIM2_PWM_Config>

    short brightness = 0;
 8000212:	2300      	movs	r3, #0
 8000214:	80fb      	strh	r3, [r7, #6]
    short fadeAmount = 2;
 8000216:	2302      	movs	r3, #2
 8000218:	80bb      	strh	r3, [r7, #4]

    while (1) {
        TIM2->CCR1 = brightness;
 800021a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800021e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000222:	6353      	str	r3, [r2, #52]	@ 0x34
        brightness += fadeAmount;
 8000224:	88fa      	ldrh	r2, [r7, #6]
 8000226:	88bb      	ldrh	r3, [r7, #4]
 8000228:	4413      	add	r3, r2
 800022a:	b29b      	uxth	r3, r3
 800022c:	80fb      	strh	r3, [r7, #6]

        if (brightness <= 0 || brightness >= 255) {
 800022e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000232:	2b00      	cmp	r3, #0
 8000234:	dd03      	ble.n	800023e <main+0x3a>
 8000236:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800023a:	2bfe      	cmp	r3, #254	@ 0xfe
 800023c:	dd03      	ble.n	8000246 <main+0x42>
            fadeAmount = -fadeAmount;
 800023e:	88bb      	ldrh	r3, [r7, #4]
 8000240:	425b      	negs	r3, r3
 8000242:	b29b      	uxth	r3, r3
 8000244:	80bb      	strh	r3, [r7, #4]
        }

        delay(10000); // Adjust delay for smooth transition
 8000246:	f242 7010 	movw	r0, #10000	@ 0x2710
 800024a:	f000 f867 	bl	800031c <delay>
        TIM2->CCR1 = brightness;
 800024e:	e7e4      	b.n	800021a <main+0x16>

08000250 <PA0_PWM_Config>:
    }
}

void PA0_PWM_Config(void) {
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
    // PA clock enable
    RCC->AHB1ENR |= (1 << 0);
 8000254:	4b11      	ldr	r3, [pc, #68]	@ (800029c <PA0_PWM_Config+0x4c>)
 8000256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000258:	4a10      	ldr	r2, [pc, #64]	@ (800029c <PA0_PWM_Config+0x4c>)
 800025a:	f043 0301 	orr.w	r3, r3, #1
 800025e:	6313      	str	r3, [r2, #48]	@ 0x30

    // Set PA0 to alternate function mode
    GPIOA->MODER &= ~(3UL << (0 * 2));
 8000260:	4b0f      	ldr	r3, [pc, #60]	@ (80002a0 <PA0_PWM_Config+0x50>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a0e      	ldr	r2, [pc, #56]	@ (80002a0 <PA0_PWM_Config+0x50>)
 8000266:	f023 0303 	bic.w	r3, r3, #3
 800026a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (2UL << (0 * 2));
 800026c:	4b0c      	ldr	r3, [pc, #48]	@ (80002a0 <PA0_PWM_Config+0x50>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a0b      	ldr	r2, [pc, #44]	@ (80002a0 <PA0_PWM_Config+0x50>)
 8000272:	f043 0302 	orr.w	r3, r3, #2
 8000276:	6013      	str	r3, [r2, #0]

    // Specify the specific alternate function (AF1) for PA0
    GPIOA->AFR[0] &= ~(0xF << (0 * 4));
 8000278:	4b09      	ldr	r3, [pc, #36]	@ (80002a0 <PA0_PWM_Config+0x50>)
 800027a:	6a1b      	ldr	r3, [r3, #32]
 800027c:	4a08      	ldr	r2, [pc, #32]	@ (80002a0 <PA0_PWM_Config+0x50>)
 800027e:	f023 030f 	bic.w	r3, r3, #15
 8000282:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (1 << (0 * 4));
 8000284:	4b06      	ldr	r3, [pc, #24]	@ (80002a0 <PA0_PWM_Config+0x50>)
 8000286:	6a1b      	ldr	r3, [r3, #32]
 8000288:	4a05      	ldr	r2, [pc, #20]	@ (80002a0 <PA0_PWM_Config+0x50>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6213      	str	r3, [r2, #32]
}
 8000290:	bf00      	nop
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	40023800 	.word	0x40023800
 80002a0:	40020000 	.word	0x40020000

080002a4 <TIM2_PWM_Config>:

void TIM2_PWM_Config(void) {
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
    // Tim2 clock enable
    RCC->APB1ENR |= (1 << 0);
 80002a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000318 <TIM2_PWM_Config+0x74>)
 80002aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002ac:	4a1a      	ldr	r2, [pc, #104]	@ (8000318 <TIM2_PWM_Config+0x74>)
 80002ae:	f043 0301 	orr.w	r3, r3, #1
 80002b2:	6413      	str	r3, [r2, #64]	@ 0x40

    // Set the auto-reload register value
    TIM2->ARR = 255; // Assuming 1kHz PWM frequency with a 1MHz timer clock
 80002b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002b8:	22ff      	movs	r2, #255	@ 0xff
 80002ba:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Configure TIM_CCMR1_OC1M_1 and TIM_CCMR1_OC1M_2
    TIM2->CCMR1 &= ~TIM_CCMR1_OC1M;
 80002bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002c0:	699b      	ldr	r3, [r3, #24]
 80002c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80002ca:	6193      	str	r3, [r2, #24]
    TIM2->CCMR1 |= (1 << 5) | (1 << 6); // Set PWM mode 1
 80002cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002d0:	699b      	ldr	r3, [r3, #24]
 80002d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002d6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80002da:	6193      	str	r3, [r2, #24]
    TIM2->CCMR1 |= TIM_CCMR1_OC1PE; // Enable preload for TIM2->CCR1
 80002dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002e0:	699b      	ldr	r3, [r3, #24]
 80002e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002e6:	f043 0308 	orr.w	r3, r3, #8
 80002ea:	6193      	str	r3, [r2, #24]

    // Configure TIM_CCER_CC1E
    TIM2->CCER |= (1 << 0); // TIM_CCER_CC1E
 80002ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002f0:	6a1b      	ldr	r3, [r3, #32]
 80002f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002f6:	f043 0301 	orr.w	r3, r3, #1
 80002fa:	6213      	str	r3, [r2, #32]

    // Start timer on CEN bit
    TIM2->CR1 |= (1 << 0); // Start Timer 2
 80002fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000306:	f043 0301 	orr.w	r3, r3, #1
 800030a:	6013      	str	r3, [r2, #0]
}
 800030c:	bf00      	nop
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	40023800 	.word	0x40023800

0800031c <delay>:

void delay(uint32_t delay) {
 800031c:	b480      	push	{r7}
 800031e:	b085      	sub	sp, #20
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
    // Simple delay loop
    for (uint32_t i = 0; i < delay; i++) {
 8000324:	2300      	movs	r3, #0
 8000326:	60fb      	str	r3, [r7, #12]
 8000328:	e003      	b.n	8000332 <delay+0x16>
        __asm("NOP");
 800032a:	bf00      	nop
    for (uint32_t i = 0; i < delay; i++) {
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	3301      	adds	r3, #1
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	68fa      	ldr	r2, [r7, #12]
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	429a      	cmp	r2, r3
 8000338:	d3f7      	bcc.n	800032a <delay+0xe>
    }
}
 800033a:	bf00      	nop
 800033c:	bf00      	nop
 800033e:	3714      	adds	r7, #20
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr

08000348 <SysTick_Handler>:
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
                    SysTick_CTRL_TICKINT_Msk |
                    SysTick_CTRL_ENABLE_Msk;
}

void SysTick_Handler(){
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
    if (ms_counter) ms_counter--;
 800034c:	4b09      	ldr	r3, [pc, #36]	@ (8000374 <SysTick_Handler+0x2c>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	2b00      	cmp	r3, #0
 8000352:	d004      	beq.n	800035e <SysTick_Handler+0x16>
 8000354:	4b07      	ldr	r3, [pc, #28]	@ (8000374 <SysTick_Handler+0x2c>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	3b01      	subs	r3, #1
 800035a:	4a06      	ldr	r2, [pc, #24]	@ (8000374 <SysTick_Handler+0x2c>)
 800035c:	6013      	str	r3, [r2, #0]
    millis++;
 800035e:	4b06      	ldr	r3, [pc, #24]	@ (8000378 <SysTick_Handler+0x30>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	3301      	adds	r3, #1
 8000364:	4a04      	ldr	r2, [pc, #16]	@ (8000378 <SysTick_Handler+0x30>)
 8000366:	6013      	str	r3, [r2, #0]
}
 8000368:	bf00      	nop
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	2000001c 	.word	0x2000001c
 8000378:	20000020 	.word	0x20000020

0800037c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800037c:	480d      	ldr	r0, [pc, #52]	@ (80003b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800037e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000380:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000384:	480c      	ldr	r0, [pc, #48]	@ (80003b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000386:	490d      	ldr	r1, [pc, #52]	@ (80003bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000388:	4a0d      	ldr	r2, [pc, #52]	@ (80003c0 <LoopForever+0xe>)
  movs r3, #0
 800038a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800038c:	e002      	b.n	8000394 <LoopCopyDataInit>

0800038e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800038e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000392:	3304      	adds	r3, #4

08000394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000398:	d3f9      	bcc.n	800038e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800039a:	4a0a      	ldr	r2, [pc, #40]	@ (80003c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800039c:	4c0a      	ldr	r4, [pc, #40]	@ (80003c8 <LoopForever+0x16>)
  movs r3, #0
 800039e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003a0:	e001      	b.n	80003a6 <LoopFillZerobss>

080003a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a4:	3204      	adds	r2, #4

080003a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a8:	d3fb      	bcc.n	80003a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003aa:	f000 f811 	bl	80003d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ae:	f7ff ff29 	bl	8000204 <main>

080003b2 <LoopForever>:

LoopForever:
  b LoopForever
 80003b2:	e7fe      	b.n	80003b2 <LoopForever>
  ldr   r0, =_estack
 80003b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003bc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003c0:	08000438 	.word	0x08000438
  ldr r2, =_sbss
 80003c4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003c8:	20000024 	.word	0x20000024

080003cc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003cc:	e7fe      	b.n	80003cc <ADC_IRQHandler>
	...

080003d0 <__libc_init_array>:
 80003d0:	b570      	push	{r4, r5, r6, lr}
 80003d2:	4d0d      	ldr	r5, [pc, #52]	@ (8000408 <__libc_init_array+0x38>)
 80003d4:	4c0d      	ldr	r4, [pc, #52]	@ (800040c <__libc_init_array+0x3c>)
 80003d6:	1b64      	subs	r4, r4, r5
 80003d8:	10a4      	asrs	r4, r4, #2
 80003da:	2600      	movs	r6, #0
 80003dc:	42a6      	cmp	r6, r4
 80003de:	d109      	bne.n	80003f4 <__libc_init_array+0x24>
 80003e0:	4d0b      	ldr	r5, [pc, #44]	@ (8000410 <__libc_init_array+0x40>)
 80003e2:	4c0c      	ldr	r4, [pc, #48]	@ (8000414 <__libc_init_array+0x44>)
 80003e4:	f000 f818 	bl	8000418 <_init>
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	10a4      	asrs	r4, r4, #2
 80003ec:	2600      	movs	r6, #0
 80003ee:	42a6      	cmp	r6, r4
 80003f0:	d105      	bne.n	80003fe <__libc_init_array+0x2e>
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f8:	4798      	blx	r3
 80003fa:	3601      	adds	r6, #1
 80003fc:	e7ee      	b.n	80003dc <__libc_init_array+0xc>
 80003fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000402:	4798      	blx	r3
 8000404:	3601      	adds	r6, #1
 8000406:	e7f2      	b.n	80003ee <__libc_init_array+0x1e>
 8000408:	08000430 	.word	0x08000430
 800040c:	08000430 	.word	0x08000430
 8000410:	08000430 	.word	0x08000430
 8000414:	08000434 	.word	0x08000434

08000418 <_init>:
 8000418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041a:	bf00      	nop
 800041c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041e:	bc08      	pop	{r3}
 8000420:	469e      	mov	lr, r3
 8000422:	4770      	bx	lr

08000424 <_fini>:
 8000424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000426:	bf00      	nop
 8000428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800042a:	bc08      	pop	{r3}
 800042c:	469e      	mov	lr, r3
 800042e:	4770      	bx	lr
