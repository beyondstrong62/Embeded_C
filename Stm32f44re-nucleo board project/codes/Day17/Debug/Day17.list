
Day17.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013e4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080015b4  080015b4  000025b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015ec  080015ec  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  080015ec  080015ec  000025ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080015f4  080015f4  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015f4  080015f4  000025f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080015f8  080015f8  000025f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080015fc  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  2000005c  08001658  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08001658  000031d0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001e3b  00000000  00000000  00003086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008df  00000000  00000000  00004ec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000200  00000000  00000000  000057a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000159  00000000  00000000  000059a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dae9  00000000  00000000  00005af9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002bb0  00000000  00000000  000135e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000479f7  00000000  00000000  00016192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0005db89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d80  00000000  00000000  0005dbcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0005e94c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800159c 	.word	0x0800159c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	0800159c 	.word	0x0800159c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	db0b      	blt.n	80002da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	f003 021f 	and.w	r2, r3, #31
 80002c8:	4906      	ldr	r1, [pc, #24]	@ (80002e4 <__NVIC_EnableIRQ+0x34>)
 80002ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ce:	095b      	lsrs	r3, r3, #5
 80002d0:	2001      	movs	r0, #1
 80002d2:	fa00 f202 	lsl.w	r2, r0, r2
 80002d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	e000e100 	.word	0xe000e100

080002e8 <adc_init>:
#include <stdio.h>

#define PA0_ADC_MODE (3 << 0)
#define ADC_SEQ_LEN_1 0

void adc_init(){
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
    GPIOA->MODER |= PA0_ADC_MODE;
 80002ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000320 <adc_init+0x38>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a0b      	ldr	r2, [pc, #44]	@ (8000320 <adc_init+0x38>)
 80002f2:	f043 0303 	orr.w	r3, r3, #3
 80002f6:	6013      	str	r3, [r2, #0]
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80002f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000324 <adc_init+0x3c>)
 80002fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002fc:	4a09      	ldr	r2, [pc, #36]	@ (8000324 <adc_init+0x3c>)
 80002fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000302:	6453      	str	r3, [r2, #68]	@ 0x44

    ADC1->SQR1 = ADC_SEQ_LEN_1;
 8000304:	4b08      	ldr	r3, [pc, #32]	@ (8000328 <adc_init+0x40>)
 8000306:	2200      	movs	r2, #0
 8000308:	62da      	str	r2, [r3, #44]	@ 0x2c
    ADC1->CR2 |= ADC_CR2_ADON;
 800030a:	4b07      	ldr	r3, [pc, #28]	@ (8000328 <adc_init+0x40>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	4a06      	ldr	r2, [pc, #24]	@ (8000328 <adc_init+0x40>)
 8000310:	f043 0301 	orr.w	r3, r3, #1
 8000314:	6093      	str	r3, [r2, #8]
}
 8000316:	bf00      	nop
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	40020000 	.word	0x40020000
 8000324:	40023800 	.word	0x40023800
 8000328:	40012000 	.word	0x40012000

0800032c <adc_int_init>:

void adc_int_init(){
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
    ADC1->CR1 |= ADC_CR1_EOCIE;
 8000330:	4b05      	ldr	r3, [pc, #20]	@ (8000348 <adc_int_init+0x1c>)
 8000332:	685b      	ldr	r3, [r3, #4]
 8000334:	4a04      	ldr	r2, [pc, #16]	@ (8000348 <adc_int_init+0x1c>)
 8000336:	f043 0320 	orr.w	r3, r3, #32
 800033a:	6053      	str	r3, [r2, #4]
    NVIC_EnableIRQ(ADC_IRQn);
 800033c:	2012      	movs	r0, #18
 800033e:	f7ff ffb7 	bl	80002b0 <__NVIC_EnableIRQ>
}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	40012000 	.word	0x40012000

0800034c <adc_start_conversion>:

void adc_start_conversion(void){
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
    ADC1->CR2 |= ADC_CR2_CONT;
 8000350:	4b07      	ldr	r3, [pc, #28]	@ (8000370 <adc_start_conversion+0x24>)
 8000352:	689b      	ldr	r3, [r3, #8]
 8000354:	4a06      	ldr	r2, [pc, #24]	@ (8000370 <adc_start_conversion+0x24>)
 8000356:	f043 0302 	orr.w	r3, r3, #2
 800035a:	6093      	str	r3, [r2, #8]
    ADC1->CR2 |= ADC_CR2_SWSTART;
 800035c:	4b04      	ldr	r3, [pc, #16]	@ (8000370 <adc_start_conversion+0x24>)
 800035e:	689b      	ldr	r3, [r3, #8]
 8000360:	4a03      	ldr	r2, [pc, #12]	@ (8000370 <adc_start_conversion+0x24>)
 8000362:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000366:	6093      	str	r3, [r2, #8]
}
 8000368:	bf00      	nop
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr
 8000370:	40012000 	.word	0x40012000

08000374 <ADC_IRQHandler>:
uint32_t adc_read(void){
    while(!(ADC1->SR & ADC_SR_EOC));
    return (ADC1->DR);
}

void ADC_IRQHandler(void){
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0

    if((ADC1->SR & ADC_SR_EOC) != 0){
 800037a:	4b11      	ldr	r3, [pc, #68]	@ (80003c0 <ADC_IRQHandler+0x4c>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	f003 0302 	and.w	r3, r3, #2
 8000382:	2b00      	cmp	r3, #0
 8000384:	d018      	beq.n	80003b8 <ADC_IRQHandler+0x44>
        ADC1->SR &=~ ADC_SR_EOC;
 8000386:	4b0e      	ldr	r3, [pc, #56]	@ (80003c0 <ADC_IRQHandler+0x4c>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4a0d      	ldr	r2, [pc, #52]	@ (80003c0 <ADC_IRQHandler+0x4c>)
 800038c:	f023 0302 	bic.w	r3, r3, #2
 8000390:	6013      	str	r3, [r2, #0]

        volatile uint32_t value = ADC1->DR;
 8000392:	4b0b      	ldr	r3, [pc, #44]	@ (80003c0 <ADC_IRQHandler+0x4c>)
 8000394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000396:	603b      	str	r3, [r7, #0]
        printf("%d\n\r", (int)value);
 8000398:	683b      	ldr	r3, [r7, #0]
 800039a:	4619      	mov	r1, r3
 800039c:	4809      	ldr	r0, [pc, #36]	@ (80003c4 <ADC_IRQHandler+0x50>)
 800039e:	f000 fa95 	bl	80008cc <iprintf>
        for(uint32_t i=0;i<0xffff;i++);
 80003a2:	2300      	movs	r3, #0
 80003a4:	607b      	str	r3, [r7, #4]
 80003a6:	e002      	b.n	80003ae <ADC_IRQHandler+0x3a>
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	3301      	adds	r3, #1
 80003ac:	607b      	str	r3, [r7, #4]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d9f7      	bls.n	80003a8 <ADC_IRQHandler+0x34>
    }
}
 80003b8:	bf00      	nop
 80003ba:	3708      	adds	r7, #8
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	40012000 	.word	0x40012000
 80003c4:	080015b4 	.word	0x080015b4

080003c8 <main>:
#endif




int main(){
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0

    clockSpeed_PLL();
 80003cc:	f000 f824 	bl	8000418 <clockSpeed_PLL>

    tx_init();
 80003d0:	f000 f892 	bl	80004f8 <tx_init>
    adc_init();
 80003d4:	f7ff ff88 	bl	80002e8 <adc_init>
    adc_int_init();
 80003d8:	f7ff ffa8 	bl	800032c <adc_int_init>

    adc_start_conversion();
 80003dc:	f7ff ffb6 	bl	800034c <adc_start_conversion>

    while(1){
 80003e0:	bf00      	nop
 80003e2:	e7fd      	b.n	80003e0 <main+0x18>

080003e4 <__io_putchar>:

    };
}

int __io_putchar(int ch){
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b084      	sub	sp, #16
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
    tx_send(ch);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	b2db      	uxtb	r3, r3
 80003f0:	4618      	mov	r0, r3
 80003f2:	f000 f8b1 	bl	8000558 <tx_send>
    for(uint32_t i=0;i<500000;i++);
 80003f6:	2300      	movs	r3, #0
 80003f8:	60fb      	str	r3, [r7, #12]
 80003fa:	e002      	b.n	8000402 <__io_putchar+0x1e>
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	3301      	adds	r3, #1
 8000400:	60fb      	str	r3, [r7, #12]
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	4a03      	ldr	r2, [pc, #12]	@ (8000414 <__io_putchar+0x30>)
 8000406:	4293      	cmp	r3, r2
 8000408:	d9f8      	bls.n	80003fc <__io_putchar+0x18>
    return ch;
 800040a:	687b      	ldr	r3, [r7, #4]
}
 800040c:	4618      	mov	r0, r3
 800040e:	3710      	adds	r7, #16
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	0007a11f 	.word	0x0007a11f

08000418 <clockSpeed_PLL>:

#include "stm32f446xx.h"

#include "pll.h"

void clockSpeed_PLL(){
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0

    RCC->CR |= RCC_CR_HSION;
 800041c:	4b32      	ldr	r3, [pc, #200]	@ (80004e8 <clockSpeed_PLL+0xd0>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a31      	ldr	r2, [pc, #196]	@ (80004e8 <clockSpeed_PLL+0xd0>)
 8000422:	f043 0301 	orr.w	r3, r3, #1
 8000426:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSIRDY));
 8000428:	bf00      	nop
 800042a:	4b2f      	ldr	r3, [pc, #188]	@ (80004e8 <clockSpeed_PLL+0xd0>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	f003 0302 	and.w	r3, r3, #2
 8000432:	2b00      	cmp	r3, #0
 8000434:	d0f9      	beq.n	800042a <clockSpeed_PLL+0x12>

    RCC->PLLCFGR = (PLL_M) | (PLL_N << 6) | (PLL_P << 16) | (PLL_Q << 24);
 8000436:	4b2c      	ldr	r3, [pc, #176]	@ (80004e8 <clockSpeed_PLL+0xd0>)
 8000438:	4a2c      	ldr	r2, [pc, #176]	@ (80004ec <clockSpeed_PLL+0xd4>)
 800043a:	605a      	str	r2, [r3, #4]
    RCC->PLLCFGR &=~ RCC_PLLCFGR_PLLSRC;
 800043c:	4b2a      	ldr	r3, [pc, #168]	@ (80004e8 <clockSpeed_PLL+0xd0>)
 800043e:	685b      	ldr	r3, [r3, #4]
 8000440:	4a29      	ldr	r2, [pc, #164]	@ (80004e8 <clockSpeed_PLL+0xd0>)
 8000442:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000446:	6053      	str	r3, [r2, #4]

    RCC->CFGR |= RCC_CFGR_HPRE_DIV1 | RCC_CFGR_PPRE2_DIV2 | RCC_CFGR_PPRE1_DIV4;
 8000448:	4b27      	ldr	r3, [pc, #156]	@ (80004e8 <clockSpeed_PLL+0xd0>)
 800044a:	689b      	ldr	r3, [r3, #8]
 800044c:	4a26      	ldr	r2, [pc, #152]	@ (80004e8 <clockSpeed_PLL+0xd0>)
 800044e:	f443 4314 	orr.w	r3, r3, #37888	@ 0x9400
 8000452:	6093      	str	r3, [r2, #8]

    RCC->CR |= RCC_CR_PLLON;
 8000454:	4b24      	ldr	r3, [pc, #144]	@ (80004e8 <clockSpeed_PLL+0xd0>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a23      	ldr	r2, [pc, #140]	@ (80004e8 <clockSpeed_PLL+0xd0>)
 800045a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800045e:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_PLLRDY));
 8000460:	bf00      	nop
 8000462:	4b21      	ldr	r3, [pc, #132]	@ (80004e8 <clockSpeed_PLL+0xd0>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800046a:	2b00      	cmp	r3, #0
 800046c:	d0f9      	beq.n	8000462 <clockSpeed_PLL+0x4a>

    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800046e:	4b1e      	ldr	r3, [pc, #120]	@ (80004e8 <clockSpeed_PLL+0xd0>)
 8000470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000472:	4a1d      	ldr	r2, [pc, #116]	@ (80004e8 <clockSpeed_PLL+0xd0>)
 8000474:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000478:	6413      	str	r3, [r2, #64]	@ 0x40
    
    PWR->CR |= PWR_CR_ODEN;
 800047a:	4b1d      	ldr	r3, [pc, #116]	@ (80004f0 <clockSpeed_PLL+0xd8>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4a1c      	ldr	r2, [pc, #112]	@ (80004f0 <clockSpeed_PLL+0xd8>)
 8000480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000484:	6013      	str	r3, [r2, #0]
    while (!(PWR->CSR & PWR_CSR_ODRDY)) ;
 8000486:	bf00      	nop
 8000488:	4b19      	ldr	r3, [pc, #100]	@ (80004f0 <clockSpeed_PLL+0xd8>)
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000490:	2b00      	cmp	r3, #0
 8000492:	d0f9      	beq.n	8000488 <clockSpeed_PLL+0x70>
    
    PWR->CR |= PWR_CR_ODSWEN;
 8000494:	4b16      	ldr	r3, [pc, #88]	@ (80004f0 <clockSpeed_PLL+0xd8>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a15      	ldr	r2, [pc, #84]	@ (80004f0 <clockSpeed_PLL+0xd8>)
 800049a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800049e:	6013      	str	r3, [r2, #0]
    while (!(PWR->CSR & PWR_CSR_ODSWRDY)) ;
 80004a0:	bf00      	nop
 80004a2:	4b13      	ldr	r3, [pc, #76]	@ (80004f0 <clockSpeed_PLL+0xd8>)
 80004a4:	685b      	ldr	r3, [r3, #4]
 80004a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d0f9      	beq.n	80004a2 <clockSpeed_PLL+0x8a>

    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 80004ae:	4b11      	ldr	r3, [pc, #68]	@ (80004f4 <clockSpeed_PLL+0xdc>)
 80004b0:	f240 7205 	movw	r2, #1797	@ 0x705
 80004b4:	601a      	str	r2, [r3, #0]

    RCC->CFGR &=~ RCC_CFGR_SW;
 80004b6:	4b0c      	ldr	r3, [pc, #48]	@ (80004e8 <clockSpeed_PLL+0xd0>)
 80004b8:	689b      	ldr	r3, [r3, #8]
 80004ba:	4a0b      	ldr	r2, [pc, #44]	@ (80004e8 <clockSpeed_PLL+0xd0>)
 80004bc:	f023 0303 	bic.w	r3, r3, #3
 80004c0:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80004c2:	4b09      	ldr	r3, [pc, #36]	@ (80004e8 <clockSpeed_PLL+0xd0>)
 80004c4:	689b      	ldr	r3, [r3, #8]
 80004c6:	4a08      	ldr	r2, [pc, #32]	@ (80004e8 <clockSpeed_PLL+0xd0>)
 80004c8:	f043 0302 	orr.w	r3, r3, #2
 80004cc:	6093      	str	r3, [r2, #8]
    while ((RCC->CFGR & RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80004ce:	bf00      	nop
 80004d0:	4b05      	ldr	r3, [pc, #20]	@ (80004e8 <clockSpeed_PLL+0xd0>)
 80004d2:	689b      	ldr	r3, [r3, #8]
 80004d4:	f003 030c 	and.w	r3, r3, #12
 80004d8:	2b08      	cmp	r3, #8
 80004da:	d1f9      	bne.n	80004d0 <clockSpeed_PLL+0xb8>

}
 80004dc:	bf00      	nop
 80004de:	bf00      	nop
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bc80      	pop	{r7}
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	40023800 	.word	0x40023800
 80004ec:	02002d08 	.word	0x02002d08
 80004f0:	40007000 	.word	0x40007000
 80004f4:	40023c00 	.word	0x40023c00

080004f8 <tx_init>:
char rx_read(){
    while(!(USART2->SR & USART_SR_RXNE)){};
    return USART2->DR;
}

void tx_init(){
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; 
 80004fc:	4b13      	ldr	r3, [pc, #76]	@ (800054c <tx_init+0x54>)
 80004fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000500:	4a12      	ldr	r2, [pc, #72]	@ (800054c <tx_init+0x54>)
 8000502:	f043 0301 	orr.w	r3, r3, #1
 8000506:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOA->MODER |= PA2_AF;
 8000508:	4b11      	ldr	r3, [pc, #68]	@ (8000550 <tx_init+0x58>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a10      	ldr	r2, [pc, #64]	@ (8000550 <tx_init+0x58>)
 800050e:	f043 0320 	orr.w	r3, r3, #32
 8000512:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |= PA2_AF_USART2_TX;
 8000514:	4b0e      	ldr	r3, [pc, #56]	@ (8000550 <tx_init+0x58>)
 8000516:	6a1b      	ldr	r3, [r3, #32]
 8000518:	4a0d      	ldr	r2, [pc, #52]	@ (8000550 <tx_init+0x58>)
 800051a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800051e:	6213      	str	r3, [r2, #32]

    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000520:	4b0a      	ldr	r3, [pc, #40]	@ (800054c <tx_init+0x54>)
 8000522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000524:	4a09      	ldr	r2, [pc, #36]	@ (800054c <tx_init+0x54>)
 8000526:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800052a:	6413      	str	r3, [r2, #64]	@ 0x40
    USART2->BRR = (APB1_FREQ + (BAUDRATE/2U))/BAUDRATE;
 800052c:	4b09      	ldr	r3, [pc, #36]	@ (8000554 <tx_init+0x5c>)
 800052e:	f240 1287 	movw	r2, #391	@ 0x187
 8000532:	609a      	str	r2, [r3, #8]
    USART2->CR1 |= USART_CR1_TE | USART_CR1_UE;
 8000534:	4b07      	ldr	r3, [pc, #28]	@ (8000554 <tx_init+0x5c>)
 8000536:	68db      	ldr	r3, [r3, #12]
 8000538:	4a06      	ldr	r2, [pc, #24]	@ (8000554 <tx_init+0x5c>)
 800053a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800053e:	f043 0308 	orr.w	r3, r3, #8
 8000542:	60d3      	str	r3, [r2, #12]
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr
 800054c:	40023800 	.word	0x40023800
 8000550:	40020000 	.word	0x40020000
 8000554:	40004400 	.word	0x40004400

08000558 <tx_send>:

void tx_send(char c){
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	71fb      	strb	r3, [r7, #7]
    while(!(USART2->SR & USART_SR_TXE)){};
 8000562:	bf00      	nop
 8000564:	4b06      	ldr	r3, [pc, #24]	@ (8000580 <tx_send+0x28>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800056c:	2b00      	cmp	r3, #0
 800056e:	d0f9      	beq.n	8000564 <tx_send+0xc>
    USART2->DR = (c & 0xFF);
 8000570:	4a03      	ldr	r2, [pc, #12]	@ (8000580 <tx_send+0x28>)
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	6053      	str	r3, [r2, #4]
};
 8000576:	bf00      	nop
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr
 8000580:	40004400 	.word	0x40004400

08000584 <SysTick_Handler>:
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
                    SysTick_CTRL_TICKINT_Msk |
                    SysTick_CTRL_ENABLE_Msk;
}

void SysTick_Handler(){
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
    if (ms_counter) ms_counter--;
 8000588:	4b08      	ldr	r3, [pc, #32]	@ (80005ac <SysTick_Handler+0x28>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d004      	beq.n	800059a <SysTick_Handler+0x16>
 8000590:	4b06      	ldr	r3, [pc, #24]	@ (80005ac <SysTick_Handler+0x28>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	3b01      	subs	r3, #1
 8000596:	4a05      	ldr	r2, [pc, #20]	@ (80005ac <SysTick_Handler+0x28>)
 8000598:	6013      	str	r3, [r2, #0]
    millis++;
 800059a:	4b05      	ldr	r3, [pc, #20]	@ (80005b0 <SysTick_Handler+0x2c>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	3301      	adds	r3, #1
 80005a0:	4a03      	ldr	r2, [pc, #12]	@ (80005b0 <SysTick_Handler+0x2c>)
 80005a2:	6013      	str	r3, [r2, #0]
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr
 80005ac:	20000078 	.word	0x20000078
 80005b0:	2000007c 	.word	0x2000007c

080005b4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]
 80005c4:	e00a      	b.n	80005dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80005c6:	f3af 8000 	nop.w
 80005ca:	4601      	mov	r1, r0
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	1c5a      	adds	r2, r3, #1
 80005d0:	60ba      	str	r2, [r7, #8]
 80005d2:	b2ca      	uxtb	r2, r1
 80005d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	3301      	adds	r3, #1
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	697a      	ldr	r2, [r7, #20]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	dbf0      	blt.n	80005c6 <_read+0x12>
  }

  return len;
 80005e4:	687b      	ldr	r3, [r7, #4]
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3718      	adds	r7, #24
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}

080005ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b086      	sub	sp, #24
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	60f8      	str	r0, [r7, #12]
 80005f6:	60b9      	str	r1, [r7, #8]
 80005f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]
 80005fe:	e009      	b.n	8000614 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	1c5a      	adds	r2, r3, #1
 8000604:	60ba      	str	r2, [r7, #8]
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff feeb 	bl	80003e4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	3301      	adds	r3, #1
 8000612:	617b      	str	r3, [r7, #20]
 8000614:	697a      	ldr	r2, [r7, #20]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	429a      	cmp	r2, r3
 800061a:	dbf1      	blt.n	8000600 <_write+0x12>
  }
  return len;
 800061c:	687b      	ldr	r3, [r7, #4]
}
 800061e:	4618      	mov	r0, r3
 8000620:	3718      	adds	r7, #24
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}

08000626 <_close>:

int _close(int file)
{
 8000626:	b480      	push	{r7}
 8000628:	b083      	sub	sp, #12
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800062e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000632:	4618      	mov	r0, r3
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr

0800063c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800064c:	605a      	str	r2, [r3, #4]
  return 0;
 800064e:	2300      	movs	r3, #0
}
 8000650:	4618      	mov	r0, r3
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	bc80      	pop	{r7}
 8000658:	4770      	bx	lr

0800065a <_isatty>:

int _isatty(int file)
{
 800065a:	b480      	push	{r7}
 800065c:	b083      	sub	sp, #12
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000662:	2301      	movs	r3, #1
}
 8000664:	4618      	mov	r0, r3
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr

0800066e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800066e:	b480      	push	{r7}
 8000670:	b085      	sub	sp, #20
 8000672:	af00      	add	r7, sp, #0
 8000674:	60f8      	str	r0, [r7, #12]
 8000676:	60b9      	str	r1, [r7, #8]
 8000678:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800067a:	2300      	movs	r3, #0
}
 800067c:	4618      	mov	r0, r3
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	bc80      	pop	{r7}
 8000684:	4770      	bx	lr
	...

08000688 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000690:	4a14      	ldr	r2, [pc, #80]	@ (80006e4 <_sbrk+0x5c>)
 8000692:	4b15      	ldr	r3, [pc, #84]	@ (80006e8 <_sbrk+0x60>)
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800069c:	4b13      	ldr	r3, [pc, #76]	@ (80006ec <_sbrk+0x64>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d102      	bne.n	80006aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006a4:	4b11      	ldr	r3, [pc, #68]	@ (80006ec <_sbrk+0x64>)
 80006a6:	4a12      	ldr	r2, [pc, #72]	@ (80006f0 <_sbrk+0x68>)
 80006a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006aa:	4b10      	ldr	r3, [pc, #64]	@ (80006ec <_sbrk+0x64>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4413      	add	r3, r2
 80006b2:	693a      	ldr	r2, [r7, #16]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d207      	bcs.n	80006c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006b8:	f000 f9ac 	bl	8000a14 <__errno>
 80006bc:	4603      	mov	r3, r0
 80006be:	220c      	movs	r2, #12
 80006c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006c2:	f04f 33ff 	mov.w	r3, #4294967295
 80006c6:	e009      	b.n	80006dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006c8:	4b08      	ldr	r3, [pc, #32]	@ (80006ec <_sbrk+0x64>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006ce:	4b07      	ldr	r3, [pc, #28]	@ (80006ec <_sbrk+0x64>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4413      	add	r3, r2
 80006d6:	4a05      	ldr	r2, [pc, #20]	@ (80006ec <_sbrk+0x64>)
 80006d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006da:	68fb      	ldr	r3, [r7, #12]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3718      	adds	r7, #24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20020000 	.word	0x20020000
 80006e8:	00000400 	.word	0x00000400
 80006ec:	20000080 	.word	0x20000080
 80006f0:	200001d0 	.word	0x200001d0

080006f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006f4:	480d      	ldr	r0, [pc, #52]	@ (800072c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006f8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006fc:	480c      	ldr	r0, [pc, #48]	@ (8000730 <LoopForever+0x6>)
  ldr r1, =_edata
 80006fe:	490d      	ldr	r1, [pc, #52]	@ (8000734 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000700:	4a0d      	ldr	r2, [pc, #52]	@ (8000738 <LoopForever+0xe>)
  movs r3, #0
 8000702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000704:	e002      	b.n	800070c <LoopCopyDataInit>

08000706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800070a:	3304      	adds	r3, #4

0800070c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800070c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800070e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000710:	d3f9      	bcc.n	8000706 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000712:	4a0a      	ldr	r2, [pc, #40]	@ (800073c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000714:	4c0a      	ldr	r4, [pc, #40]	@ (8000740 <LoopForever+0x16>)
  movs r3, #0
 8000716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000718:	e001      	b.n	800071e <LoopFillZerobss>

0800071a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800071a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800071c:	3204      	adds	r2, #4

0800071e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800071e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000720:	d3fb      	bcc.n	800071a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000722:	f000 f97d 	bl	8000a20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000726:	f7ff fe4f 	bl	80003c8 <main>

0800072a <LoopForever>:

LoopForever:
  b LoopForever
 800072a:	e7fe      	b.n	800072a <LoopForever>
  ldr   r0, =_estack
 800072c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000730:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000734:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000738:	080015fc 	.word	0x080015fc
  ldr r2, =_sbss
 800073c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000740:	200001d0 	.word	0x200001d0

08000744 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000744:	e7fe      	b.n	8000744 <BusFault_Handler>
	...

08000748 <std>:
 8000748:	2300      	movs	r3, #0
 800074a:	b510      	push	{r4, lr}
 800074c:	4604      	mov	r4, r0
 800074e:	e9c0 3300 	strd	r3, r3, [r0]
 8000752:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000756:	6083      	str	r3, [r0, #8]
 8000758:	8181      	strh	r1, [r0, #12]
 800075a:	6643      	str	r3, [r0, #100]	@ 0x64
 800075c:	81c2      	strh	r2, [r0, #14]
 800075e:	6183      	str	r3, [r0, #24]
 8000760:	4619      	mov	r1, r3
 8000762:	2208      	movs	r2, #8
 8000764:	305c      	adds	r0, #92	@ 0x5c
 8000766:	f000 f906 	bl	8000976 <memset>
 800076a:	4b0d      	ldr	r3, [pc, #52]	@ (80007a0 <std+0x58>)
 800076c:	6263      	str	r3, [r4, #36]	@ 0x24
 800076e:	4b0d      	ldr	r3, [pc, #52]	@ (80007a4 <std+0x5c>)
 8000770:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000772:	4b0d      	ldr	r3, [pc, #52]	@ (80007a8 <std+0x60>)
 8000774:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000776:	4b0d      	ldr	r3, [pc, #52]	@ (80007ac <std+0x64>)
 8000778:	6323      	str	r3, [r4, #48]	@ 0x30
 800077a:	4b0d      	ldr	r3, [pc, #52]	@ (80007b0 <std+0x68>)
 800077c:	6224      	str	r4, [r4, #32]
 800077e:	429c      	cmp	r4, r3
 8000780:	d006      	beq.n	8000790 <std+0x48>
 8000782:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000786:	4294      	cmp	r4, r2
 8000788:	d002      	beq.n	8000790 <std+0x48>
 800078a:	33d0      	adds	r3, #208	@ 0xd0
 800078c:	429c      	cmp	r4, r3
 800078e:	d105      	bne.n	800079c <std+0x54>
 8000790:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000798:	f000 b966 	b.w	8000a68 <__retarget_lock_init_recursive>
 800079c:	bd10      	pop	{r4, pc}
 800079e:	bf00      	nop
 80007a0:	080008f1 	.word	0x080008f1
 80007a4:	08000913 	.word	0x08000913
 80007a8:	0800094b 	.word	0x0800094b
 80007ac:	0800096f 	.word	0x0800096f
 80007b0:	20000084 	.word	0x20000084

080007b4 <stdio_exit_handler>:
 80007b4:	4a02      	ldr	r2, [pc, #8]	@ (80007c0 <stdio_exit_handler+0xc>)
 80007b6:	4903      	ldr	r1, [pc, #12]	@ (80007c4 <stdio_exit_handler+0x10>)
 80007b8:	4803      	ldr	r0, [pc, #12]	@ (80007c8 <stdio_exit_handler+0x14>)
 80007ba:	f000 b869 	b.w	8000890 <_fwalk_sglue>
 80007be:	bf00      	nop
 80007c0:	20000000 	.word	0x20000000
 80007c4:	080012fd 	.word	0x080012fd
 80007c8:	20000010 	.word	0x20000010

080007cc <cleanup_stdio>:
 80007cc:	6841      	ldr	r1, [r0, #4]
 80007ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000800 <cleanup_stdio+0x34>)
 80007d0:	4299      	cmp	r1, r3
 80007d2:	b510      	push	{r4, lr}
 80007d4:	4604      	mov	r4, r0
 80007d6:	d001      	beq.n	80007dc <cleanup_stdio+0x10>
 80007d8:	f000 fd90 	bl	80012fc <_fflush_r>
 80007dc:	68a1      	ldr	r1, [r4, #8]
 80007de:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <cleanup_stdio+0x38>)
 80007e0:	4299      	cmp	r1, r3
 80007e2:	d002      	beq.n	80007ea <cleanup_stdio+0x1e>
 80007e4:	4620      	mov	r0, r4
 80007e6:	f000 fd89 	bl	80012fc <_fflush_r>
 80007ea:	68e1      	ldr	r1, [r4, #12]
 80007ec:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <cleanup_stdio+0x3c>)
 80007ee:	4299      	cmp	r1, r3
 80007f0:	d004      	beq.n	80007fc <cleanup_stdio+0x30>
 80007f2:	4620      	mov	r0, r4
 80007f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007f8:	f000 bd80 	b.w	80012fc <_fflush_r>
 80007fc:	bd10      	pop	{r4, pc}
 80007fe:	bf00      	nop
 8000800:	20000084 	.word	0x20000084
 8000804:	200000ec 	.word	0x200000ec
 8000808:	20000154 	.word	0x20000154

0800080c <global_stdio_init.part.0>:
 800080c:	b510      	push	{r4, lr}
 800080e:	4b0b      	ldr	r3, [pc, #44]	@ (800083c <global_stdio_init.part.0+0x30>)
 8000810:	4c0b      	ldr	r4, [pc, #44]	@ (8000840 <global_stdio_init.part.0+0x34>)
 8000812:	4a0c      	ldr	r2, [pc, #48]	@ (8000844 <global_stdio_init.part.0+0x38>)
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	4620      	mov	r0, r4
 8000818:	2200      	movs	r2, #0
 800081a:	2104      	movs	r1, #4
 800081c:	f7ff ff94 	bl	8000748 <std>
 8000820:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000824:	2201      	movs	r2, #1
 8000826:	2109      	movs	r1, #9
 8000828:	f7ff ff8e 	bl	8000748 <std>
 800082c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000830:	2202      	movs	r2, #2
 8000832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000836:	2112      	movs	r1, #18
 8000838:	f7ff bf86 	b.w	8000748 <std>
 800083c:	200001bc 	.word	0x200001bc
 8000840:	20000084 	.word	0x20000084
 8000844:	080007b5 	.word	0x080007b5

08000848 <__sfp_lock_acquire>:
 8000848:	4801      	ldr	r0, [pc, #4]	@ (8000850 <__sfp_lock_acquire+0x8>)
 800084a:	f000 b90e 	b.w	8000a6a <__retarget_lock_acquire_recursive>
 800084e:	bf00      	nop
 8000850:	200001c5 	.word	0x200001c5

08000854 <__sfp_lock_release>:
 8000854:	4801      	ldr	r0, [pc, #4]	@ (800085c <__sfp_lock_release+0x8>)
 8000856:	f000 b909 	b.w	8000a6c <__retarget_lock_release_recursive>
 800085a:	bf00      	nop
 800085c:	200001c5 	.word	0x200001c5

08000860 <__sinit>:
 8000860:	b510      	push	{r4, lr}
 8000862:	4604      	mov	r4, r0
 8000864:	f7ff fff0 	bl	8000848 <__sfp_lock_acquire>
 8000868:	6a23      	ldr	r3, [r4, #32]
 800086a:	b11b      	cbz	r3, 8000874 <__sinit+0x14>
 800086c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000870:	f7ff bff0 	b.w	8000854 <__sfp_lock_release>
 8000874:	4b04      	ldr	r3, [pc, #16]	@ (8000888 <__sinit+0x28>)
 8000876:	6223      	str	r3, [r4, #32]
 8000878:	4b04      	ldr	r3, [pc, #16]	@ (800088c <__sinit+0x2c>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d1f5      	bne.n	800086c <__sinit+0xc>
 8000880:	f7ff ffc4 	bl	800080c <global_stdio_init.part.0>
 8000884:	e7f2      	b.n	800086c <__sinit+0xc>
 8000886:	bf00      	nop
 8000888:	080007cd 	.word	0x080007cd
 800088c:	200001bc 	.word	0x200001bc

08000890 <_fwalk_sglue>:
 8000890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000894:	4607      	mov	r7, r0
 8000896:	4688      	mov	r8, r1
 8000898:	4614      	mov	r4, r2
 800089a:	2600      	movs	r6, #0
 800089c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80008a0:	f1b9 0901 	subs.w	r9, r9, #1
 80008a4:	d505      	bpl.n	80008b2 <_fwalk_sglue+0x22>
 80008a6:	6824      	ldr	r4, [r4, #0]
 80008a8:	2c00      	cmp	r4, #0
 80008aa:	d1f7      	bne.n	800089c <_fwalk_sglue+0xc>
 80008ac:	4630      	mov	r0, r6
 80008ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80008b2:	89ab      	ldrh	r3, [r5, #12]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d907      	bls.n	80008c8 <_fwalk_sglue+0x38>
 80008b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80008bc:	3301      	adds	r3, #1
 80008be:	d003      	beq.n	80008c8 <_fwalk_sglue+0x38>
 80008c0:	4629      	mov	r1, r5
 80008c2:	4638      	mov	r0, r7
 80008c4:	47c0      	blx	r8
 80008c6:	4306      	orrs	r6, r0
 80008c8:	3568      	adds	r5, #104	@ 0x68
 80008ca:	e7e9      	b.n	80008a0 <_fwalk_sglue+0x10>

080008cc <iprintf>:
 80008cc:	b40f      	push	{r0, r1, r2, r3}
 80008ce:	b507      	push	{r0, r1, r2, lr}
 80008d0:	4906      	ldr	r1, [pc, #24]	@ (80008ec <iprintf+0x20>)
 80008d2:	ab04      	add	r3, sp, #16
 80008d4:	6808      	ldr	r0, [r1, #0]
 80008d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80008da:	6881      	ldr	r1, [r0, #8]
 80008dc:	9301      	str	r3, [sp, #4]
 80008de:	f000 f9e7 	bl	8000cb0 <_vfiprintf_r>
 80008e2:	b003      	add	sp, #12
 80008e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80008e8:	b004      	add	sp, #16
 80008ea:	4770      	bx	lr
 80008ec:	2000000c 	.word	0x2000000c

080008f0 <__sread>:
 80008f0:	b510      	push	{r4, lr}
 80008f2:	460c      	mov	r4, r1
 80008f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008f8:	f000 f868 	bl	80009cc <_read_r>
 80008fc:	2800      	cmp	r0, #0
 80008fe:	bfab      	itete	ge
 8000900:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000902:	89a3      	ldrhlt	r3, [r4, #12]
 8000904:	181b      	addge	r3, r3, r0
 8000906:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800090a:	bfac      	ite	ge
 800090c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800090e:	81a3      	strhlt	r3, [r4, #12]
 8000910:	bd10      	pop	{r4, pc}

08000912 <__swrite>:
 8000912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000916:	461f      	mov	r7, r3
 8000918:	898b      	ldrh	r3, [r1, #12]
 800091a:	05db      	lsls	r3, r3, #23
 800091c:	4605      	mov	r5, r0
 800091e:	460c      	mov	r4, r1
 8000920:	4616      	mov	r6, r2
 8000922:	d505      	bpl.n	8000930 <__swrite+0x1e>
 8000924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000928:	2302      	movs	r3, #2
 800092a:	2200      	movs	r2, #0
 800092c:	f000 f83c 	bl	80009a8 <_lseek_r>
 8000930:	89a3      	ldrh	r3, [r4, #12]
 8000932:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000936:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800093a:	81a3      	strh	r3, [r4, #12]
 800093c:	4632      	mov	r2, r6
 800093e:	463b      	mov	r3, r7
 8000940:	4628      	mov	r0, r5
 8000942:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000946:	f000 b853 	b.w	80009f0 <_write_r>

0800094a <__sseek>:
 800094a:	b510      	push	{r4, lr}
 800094c:	460c      	mov	r4, r1
 800094e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000952:	f000 f829 	bl	80009a8 <_lseek_r>
 8000956:	1c43      	adds	r3, r0, #1
 8000958:	89a3      	ldrh	r3, [r4, #12]
 800095a:	bf15      	itete	ne
 800095c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800095e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000962:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000966:	81a3      	strheq	r3, [r4, #12]
 8000968:	bf18      	it	ne
 800096a:	81a3      	strhne	r3, [r4, #12]
 800096c:	bd10      	pop	{r4, pc}

0800096e <__sclose>:
 800096e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000972:	f000 b809 	b.w	8000988 <_close_r>

08000976 <memset>:
 8000976:	4402      	add	r2, r0
 8000978:	4603      	mov	r3, r0
 800097a:	4293      	cmp	r3, r2
 800097c:	d100      	bne.n	8000980 <memset+0xa>
 800097e:	4770      	bx	lr
 8000980:	f803 1b01 	strb.w	r1, [r3], #1
 8000984:	e7f9      	b.n	800097a <memset+0x4>
	...

08000988 <_close_r>:
 8000988:	b538      	push	{r3, r4, r5, lr}
 800098a:	4d06      	ldr	r5, [pc, #24]	@ (80009a4 <_close_r+0x1c>)
 800098c:	2300      	movs	r3, #0
 800098e:	4604      	mov	r4, r0
 8000990:	4608      	mov	r0, r1
 8000992:	602b      	str	r3, [r5, #0]
 8000994:	f7ff fe47 	bl	8000626 <_close>
 8000998:	1c43      	adds	r3, r0, #1
 800099a:	d102      	bne.n	80009a2 <_close_r+0x1a>
 800099c:	682b      	ldr	r3, [r5, #0]
 800099e:	b103      	cbz	r3, 80009a2 <_close_r+0x1a>
 80009a0:	6023      	str	r3, [r4, #0]
 80009a2:	bd38      	pop	{r3, r4, r5, pc}
 80009a4:	200001c0 	.word	0x200001c0

080009a8 <_lseek_r>:
 80009a8:	b538      	push	{r3, r4, r5, lr}
 80009aa:	4d07      	ldr	r5, [pc, #28]	@ (80009c8 <_lseek_r+0x20>)
 80009ac:	4604      	mov	r4, r0
 80009ae:	4608      	mov	r0, r1
 80009b0:	4611      	mov	r1, r2
 80009b2:	2200      	movs	r2, #0
 80009b4:	602a      	str	r2, [r5, #0]
 80009b6:	461a      	mov	r2, r3
 80009b8:	f7ff fe59 	bl	800066e <_lseek>
 80009bc:	1c43      	adds	r3, r0, #1
 80009be:	d102      	bne.n	80009c6 <_lseek_r+0x1e>
 80009c0:	682b      	ldr	r3, [r5, #0]
 80009c2:	b103      	cbz	r3, 80009c6 <_lseek_r+0x1e>
 80009c4:	6023      	str	r3, [r4, #0]
 80009c6:	bd38      	pop	{r3, r4, r5, pc}
 80009c8:	200001c0 	.word	0x200001c0

080009cc <_read_r>:
 80009cc:	b538      	push	{r3, r4, r5, lr}
 80009ce:	4d07      	ldr	r5, [pc, #28]	@ (80009ec <_read_r+0x20>)
 80009d0:	4604      	mov	r4, r0
 80009d2:	4608      	mov	r0, r1
 80009d4:	4611      	mov	r1, r2
 80009d6:	2200      	movs	r2, #0
 80009d8:	602a      	str	r2, [r5, #0]
 80009da:	461a      	mov	r2, r3
 80009dc:	f7ff fdea 	bl	80005b4 <_read>
 80009e0:	1c43      	adds	r3, r0, #1
 80009e2:	d102      	bne.n	80009ea <_read_r+0x1e>
 80009e4:	682b      	ldr	r3, [r5, #0]
 80009e6:	b103      	cbz	r3, 80009ea <_read_r+0x1e>
 80009e8:	6023      	str	r3, [r4, #0]
 80009ea:	bd38      	pop	{r3, r4, r5, pc}
 80009ec:	200001c0 	.word	0x200001c0

080009f0 <_write_r>:
 80009f0:	b538      	push	{r3, r4, r5, lr}
 80009f2:	4d07      	ldr	r5, [pc, #28]	@ (8000a10 <_write_r+0x20>)
 80009f4:	4604      	mov	r4, r0
 80009f6:	4608      	mov	r0, r1
 80009f8:	4611      	mov	r1, r2
 80009fa:	2200      	movs	r2, #0
 80009fc:	602a      	str	r2, [r5, #0]
 80009fe:	461a      	mov	r2, r3
 8000a00:	f7ff fdf5 	bl	80005ee <_write>
 8000a04:	1c43      	adds	r3, r0, #1
 8000a06:	d102      	bne.n	8000a0e <_write_r+0x1e>
 8000a08:	682b      	ldr	r3, [r5, #0]
 8000a0a:	b103      	cbz	r3, 8000a0e <_write_r+0x1e>
 8000a0c:	6023      	str	r3, [r4, #0]
 8000a0e:	bd38      	pop	{r3, r4, r5, pc}
 8000a10:	200001c0 	.word	0x200001c0

08000a14 <__errno>:
 8000a14:	4b01      	ldr	r3, [pc, #4]	@ (8000a1c <__errno+0x8>)
 8000a16:	6818      	ldr	r0, [r3, #0]
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	2000000c 	.word	0x2000000c

08000a20 <__libc_init_array>:
 8000a20:	b570      	push	{r4, r5, r6, lr}
 8000a22:	4d0d      	ldr	r5, [pc, #52]	@ (8000a58 <__libc_init_array+0x38>)
 8000a24:	4c0d      	ldr	r4, [pc, #52]	@ (8000a5c <__libc_init_array+0x3c>)
 8000a26:	1b64      	subs	r4, r4, r5
 8000a28:	10a4      	asrs	r4, r4, #2
 8000a2a:	2600      	movs	r6, #0
 8000a2c:	42a6      	cmp	r6, r4
 8000a2e:	d109      	bne.n	8000a44 <__libc_init_array+0x24>
 8000a30:	4d0b      	ldr	r5, [pc, #44]	@ (8000a60 <__libc_init_array+0x40>)
 8000a32:	4c0c      	ldr	r4, [pc, #48]	@ (8000a64 <__libc_init_array+0x44>)
 8000a34:	f000 fdb2 	bl	800159c <_init>
 8000a38:	1b64      	subs	r4, r4, r5
 8000a3a:	10a4      	asrs	r4, r4, #2
 8000a3c:	2600      	movs	r6, #0
 8000a3e:	42a6      	cmp	r6, r4
 8000a40:	d105      	bne.n	8000a4e <__libc_init_array+0x2e>
 8000a42:	bd70      	pop	{r4, r5, r6, pc}
 8000a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a48:	4798      	blx	r3
 8000a4a:	3601      	adds	r6, #1
 8000a4c:	e7ee      	b.n	8000a2c <__libc_init_array+0xc>
 8000a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a52:	4798      	blx	r3
 8000a54:	3601      	adds	r6, #1
 8000a56:	e7f2      	b.n	8000a3e <__libc_init_array+0x1e>
 8000a58:	080015f4 	.word	0x080015f4
 8000a5c:	080015f4 	.word	0x080015f4
 8000a60:	080015f4 	.word	0x080015f4
 8000a64:	080015f8 	.word	0x080015f8

08000a68 <__retarget_lock_init_recursive>:
 8000a68:	4770      	bx	lr

08000a6a <__retarget_lock_acquire_recursive>:
 8000a6a:	4770      	bx	lr

08000a6c <__retarget_lock_release_recursive>:
 8000a6c:	4770      	bx	lr
	...

08000a70 <_free_r>:
 8000a70:	b538      	push	{r3, r4, r5, lr}
 8000a72:	4605      	mov	r5, r0
 8000a74:	2900      	cmp	r1, #0
 8000a76:	d041      	beq.n	8000afc <_free_r+0x8c>
 8000a78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a7c:	1f0c      	subs	r4, r1, #4
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	bfb8      	it	lt
 8000a82:	18e4      	addlt	r4, r4, r3
 8000a84:	f000 f8e0 	bl	8000c48 <__malloc_lock>
 8000a88:	4a1d      	ldr	r2, [pc, #116]	@ (8000b00 <_free_r+0x90>)
 8000a8a:	6813      	ldr	r3, [r2, #0]
 8000a8c:	b933      	cbnz	r3, 8000a9c <_free_r+0x2c>
 8000a8e:	6063      	str	r3, [r4, #4]
 8000a90:	6014      	str	r4, [r2, #0]
 8000a92:	4628      	mov	r0, r5
 8000a94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a98:	f000 b8dc 	b.w	8000c54 <__malloc_unlock>
 8000a9c:	42a3      	cmp	r3, r4
 8000a9e:	d908      	bls.n	8000ab2 <_free_r+0x42>
 8000aa0:	6820      	ldr	r0, [r4, #0]
 8000aa2:	1821      	adds	r1, r4, r0
 8000aa4:	428b      	cmp	r3, r1
 8000aa6:	bf01      	itttt	eq
 8000aa8:	6819      	ldreq	r1, [r3, #0]
 8000aaa:	685b      	ldreq	r3, [r3, #4]
 8000aac:	1809      	addeq	r1, r1, r0
 8000aae:	6021      	streq	r1, [r4, #0]
 8000ab0:	e7ed      	b.n	8000a8e <_free_r+0x1e>
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	b10b      	cbz	r3, 8000abc <_free_r+0x4c>
 8000ab8:	42a3      	cmp	r3, r4
 8000aba:	d9fa      	bls.n	8000ab2 <_free_r+0x42>
 8000abc:	6811      	ldr	r1, [r2, #0]
 8000abe:	1850      	adds	r0, r2, r1
 8000ac0:	42a0      	cmp	r0, r4
 8000ac2:	d10b      	bne.n	8000adc <_free_r+0x6c>
 8000ac4:	6820      	ldr	r0, [r4, #0]
 8000ac6:	4401      	add	r1, r0
 8000ac8:	1850      	adds	r0, r2, r1
 8000aca:	4283      	cmp	r3, r0
 8000acc:	6011      	str	r1, [r2, #0]
 8000ace:	d1e0      	bne.n	8000a92 <_free_r+0x22>
 8000ad0:	6818      	ldr	r0, [r3, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	6053      	str	r3, [r2, #4]
 8000ad6:	4408      	add	r0, r1
 8000ad8:	6010      	str	r0, [r2, #0]
 8000ada:	e7da      	b.n	8000a92 <_free_r+0x22>
 8000adc:	d902      	bls.n	8000ae4 <_free_r+0x74>
 8000ade:	230c      	movs	r3, #12
 8000ae0:	602b      	str	r3, [r5, #0]
 8000ae2:	e7d6      	b.n	8000a92 <_free_r+0x22>
 8000ae4:	6820      	ldr	r0, [r4, #0]
 8000ae6:	1821      	adds	r1, r4, r0
 8000ae8:	428b      	cmp	r3, r1
 8000aea:	bf04      	itt	eq
 8000aec:	6819      	ldreq	r1, [r3, #0]
 8000aee:	685b      	ldreq	r3, [r3, #4]
 8000af0:	6063      	str	r3, [r4, #4]
 8000af2:	bf04      	itt	eq
 8000af4:	1809      	addeq	r1, r1, r0
 8000af6:	6021      	streq	r1, [r4, #0]
 8000af8:	6054      	str	r4, [r2, #4]
 8000afa:	e7ca      	b.n	8000a92 <_free_r+0x22>
 8000afc:	bd38      	pop	{r3, r4, r5, pc}
 8000afe:	bf00      	nop
 8000b00:	200001cc 	.word	0x200001cc

08000b04 <sbrk_aligned>:
 8000b04:	b570      	push	{r4, r5, r6, lr}
 8000b06:	4e0f      	ldr	r6, [pc, #60]	@ (8000b44 <sbrk_aligned+0x40>)
 8000b08:	460c      	mov	r4, r1
 8000b0a:	6831      	ldr	r1, [r6, #0]
 8000b0c:	4605      	mov	r5, r0
 8000b0e:	b911      	cbnz	r1, 8000b16 <sbrk_aligned+0x12>
 8000b10:	f000 fcb0 	bl	8001474 <_sbrk_r>
 8000b14:	6030      	str	r0, [r6, #0]
 8000b16:	4621      	mov	r1, r4
 8000b18:	4628      	mov	r0, r5
 8000b1a:	f000 fcab 	bl	8001474 <_sbrk_r>
 8000b1e:	1c43      	adds	r3, r0, #1
 8000b20:	d103      	bne.n	8000b2a <sbrk_aligned+0x26>
 8000b22:	f04f 34ff 	mov.w	r4, #4294967295
 8000b26:	4620      	mov	r0, r4
 8000b28:	bd70      	pop	{r4, r5, r6, pc}
 8000b2a:	1cc4      	adds	r4, r0, #3
 8000b2c:	f024 0403 	bic.w	r4, r4, #3
 8000b30:	42a0      	cmp	r0, r4
 8000b32:	d0f8      	beq.n	8000b26 <sbrk_aligned+0x22>
 8000b34:	1a21      	subs	r1, r4, r0
 8000b36:	4628      	mov	r0, r5
 8000b38:	f000 fc9c 	bl	8001474 <_sbrk_r>
 8000b3c:	3001      	adds	r0, #1
 8000b3e:	d1f2      	bne.n	8000b26 <sbrk_aligned+0x22>
 8000b40:	e7ef      	b.n	8000b22 <sbrk_aligned+0x1e>
 8000b42:	bf00      	nop
 8000b44:	200001c8 	.word	0x200001c8

08000b48 <_malloc_r>:
 8000b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b4c:	1ccd      	adds	r5, r1, #3
 8000b4e:	f025 0503 	bic.w	r5, r5, #3
 8000b52:	3508      	adds	r5, #8
 8000b54:	2d0c      	cmp	r5, #12
 8000b56:	bf38      	it	cc
 8000b58:	250c      	movcc	r5, #12
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	4606      	mov	r6, r0
 8000b5e:	db01      	blt.n	8000b64 <_malloc_r+0x1c>
 8000b60:	42a9      	cmp	r1, r5
 8000b62:	d904      	bls.n	8000b6e <_malloc_r+0x26>
 8000b64:	230c      	movs	r3, #12
 8000b66:	6033      	str	r3, [r6, #0]
 8000b68:	2000      	movs	r0, #0
 8000b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000c44 <_malloc_r+0xfc>
 8000b72:	f000 f869 	bl	8000c48 <__malloc_lock>
 8000b76:	f8d8 3000 	ldr.w	r3, [r8]
 8000b7a:	461c      	mov	r4, r3
 8000b7c:	bb44      	cbnz	r4, 8000bd0 <_malloc_r+0x88>
 8000b7e:	4629      	mov	r1, r5
 8000b80:	4630      	mov	r0, r6
 8000b82:	f7ff ffbf 	bl	8000b04 <sbrk_aligned>
 8000b86:	1c43      	adds	r3, r0, #1
 8000b88:	4604      	mov	r4, r0
 8000b8a:	d158      	bne.n	8000c3e <_malloc_r+0xf6>
 8000b8c:	f8d8 4000 	ldr.w	r4, [r8]
 8000b90:	4627      	mov	r7, r4
 8000b92:	2f00      	cmp	r7, #0
 8000b94:	d143      	bne.n	8000c1e <_malloc_r+0xd6>
 8000b96:	2c00      	cmp	r4, #0
 8000b98:	d04b      	beq.n	8000c32 <_malloc_r+0xea>
 8000b9a:	6823      	ldr	r3, [r4, #0]
 8000b9c:	4639      	mov	r1, r7
 8000b9e:	4630      	mov	r0, r6
 8000ba0:	eb04 0903 	add.w	r9, r4, r3
 8000ba4:	f000 fc66 	bl	8001474 <_sbrk_r>
 8000ba8:	4581      	cmp	r9, r0
 8000baa:	d142      	bne.n	8000c32 <_malloc_r+0xea>
 8000bac:	6821      	ldr	r1, [r4, #0]
 8000bae:	1a6d      	subs	r5, r5, r1
 8000bb0:	4629      	mov	r1, r5
 8000bb2:	4630      	mov	r0, r6
 8000bb4:	f7ff ffa6 	bl	8000b04 <sbrk_aligned>
 8000bb8:	3001      	adds	r0, #1
 8000bba:	d03a      	beq.n	8000c32 <_malloc_r+0xea>
 8000bbc:	6823      	ldr	r3, [r4, #0]
 8000bbe:	442b      	add	r3, r5
 8000bc0:	6023      	str	r3, [r4, #0]
 8000bc2:	f8d8 3000 	ldr.w	r3, [r8]
 8000bc6:	685a      	ldr	r2, [r3, #4]
 8000bc8:	bb62      	cbnz	r2, 8000c24 <_malloc_r+0xdc>
 8000bca:	f8c8 7000 	str.w	r7, [r8]
 8000bce:	e00f      	b.n	8000bf0 <_malloc_r+0xa8>
 8000bd0:	6822      	ldr	r2, [r4, #0]
 8000bd2:	1b52      	subs	r2, r2, r5
 8000bd4:	d420      	bmi.n	8000c18 <_malloc_r+0xd0>
 8000bd6:	2a0b      	cmp	r2, #11
 8000bd8:	d917      	bls.n	8000c0a <_malloc_r+0xc2>
 8000bda:	1961      	adds	r1, r4, r5
 8000bdc:	42a3      	cmp	r3, r4
 8000bde:	6025      	str	r5, [r4, #0]
 8000be0:	bf18      	it	ne
 8000be2:	6059      	strne	r1, [r3, #4]
 8000be4:	6863      	ldr	r3, [r4, #4]
 8000be6:	bf08      	it	eq
 8000be8:	f8c8 1000 	streq.w	r1, [r8]
 8000bec:	5162      	str	r2, [r4, r5]
 8000bee:	604b      	str	r3, [r1, #4]
 8000bf0:	4630      	mov	r0, r6
 8000bf2:	f000 f82f 	bl	8000c54 <__malloc_unlock>
 8000bf6:	f104 000b 	add.w	r0, r4, #11
 8000bfa:	1d23      	adds	r3, r4, #4
 8000bfc:	f020 0007 	bic.w	r0, r0, #7
 8000c00:	1ac2      	subs	r2, r0, r3
 8000c02:	bf1c      	itt	ne
 8000c04:	1a1b      	subne	r3, r3, r0
 8000c06:	50a3      	strne	r3, [r4, r2]
 8000c08:	e7af      	b.n	8000b6a <_malloc_r+0x22>
 8000c0a:	6862      	ldr	r2, [r4, #4]
 8000c0c:	42a3      	cmp	r3, r4
 8000c0e:	bf0c      	ite	eq
 8000c10:	f8c8 2000 	streq.w	r2, [r8]
 8000c14:	605a      	strne	r2, [r3, #4]
 8000c16:	e7eb      	b.n	8000bf0 <_malloc_r+0xa8>
 8000c18:	4623      	mov	r3, r4
 8000c1a:	6864      	ldr	r4, [r4, #4]
 8000c1c:	e7ae      	b.n	8000b7c <_malloc_r+0x34>
 8000c1e:	463c      	mov	r4, r7
 8000c20:	687f      	ldr	r7, [r7, #4]
 8000c22:	e7b6      	b.n	8000b92 <_malloc_r+0x4a>
 8000c24:	461a      	mov	r2, r3
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	42a3      	cmp	r3, r4
 8000c2a:	d1fb      	bne.n	8000c24 <_malloc_r+0xdc>
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	6053      	str	r3, [r2, #4]
 8000c30:	e7de      	b.n	8000bf0 <_malloc_r+0xa8>
 8000c32:	230c      	movs	r3, #12
 8000c34:	6033      	str	r3, [r6, #0]
 8000c36:	4630      	mov	r0, r6
 8000c38:	f000 f80c 	bl	8000c54 <__malloc_unlock>
 8000c3c:	e794      	b.n	8000b68 <_malloc_r+0x20>
 8000c3e:	6005      	str	r5, [r0, #0]
 8000c40:	e7d6      	b.n	8000bf0 <_malloc_r+0xa8>
 8000c42:	bf00      	nop
 8000c44:	200001cc 	.word	0x200001cc

08000c48 <__malloc_lock>:
 8000c48:	4801      	ldr	r0, [pc, #4]	@ (8000c50 <__malloc_lock+0x8>)
 8000c4a:	f7ff bf0e 	b.w	8000a6a <__retarget_lock_acquire_recursive>
 8000c4e:	bf00      	nop
 8000c50:	200001c4 	.word	0x200001c4

08000c54 <__malloc_unlock>:
 8000c54:	4801      	ldr	r0, [pc, #4]	@ (8000c5c <__malloc_unlock+0x8>)
 8000c56:	f7ff bf09 	b.w	8000a6c <__retarget_lock_release_recursive>
 8000c5a:	bf00      	nop
 8000c5c:	200001c4 	.word	0x200001c4

08000c60 <__sfputc_r>:
 8000c60:	6893      	ldr	r3, [r2, #8]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	b410      	push	{r4}
 8000c68:	6093      	str	r3, [r2, #8]
 8000c6a:	da07      	bge.n	8000c7c <__sfputc_r+0x1c>
 8000c6c:	6994      	ldr	r4, [r2, #24]
 8000c6e:	42a3      	cmp	r3, r4
 8000c70:	db01      	blt.n	8000c76 <__sfputc_r+0x16>
 8000c72:	290a      	cmp	r1, #10
 8000c74:	d102      	bne.n	8000c7c <__sfputc_r+0x1c>
 8000c76:	bc10      	pop	{r4}
 8000c78:	f000 bb68 	b.w	800134c <__swbuf_r>
 8000c7c:	6813      	ldr	r3, [r2, #0]
 8000c7e:	1c58      	adds	r0, r3, #1
 8000c80:	6010      	str	r0, [r2, #0]
 8000c82:	7019      	strb	r1, [r3, #0]
 8000c84:	4608      	mov	r0, r1
 8000c86:	bc10      	pop	{r4}
 8000c88:	4770      	bx	lr

08000c8a <__sfputs_r>:
 8000c8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c8c:	4606      	mov	r6, r0
 8000c8e:	460f      	mov	r7, r1
 8000c90:	4614      	mov	r4, r2
 8000c92:	18d5      	adds	r5, r2, r3
 8000c94:	42ac      	cmp	r4, r5
 8000c96:	d101      	bne.n	8000c9c <__sfputs_r+0x12>
 8000c98:	2000      	movs	r0, #0
 8000c9a:	e007      	b.n	8000cac <__sfputs_r+0x22>
 8000c9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ca0:	463a      	mov	r2, r7
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	f7ff ffdc 	bl	8000c60 <__sfputc_r>
 8000ca8:	1c43      	adds	r3, r0, #1
 8000caa:	d1f3      	bne.n	8000c94 <__sfputs_r+0xa>
 8000cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000cb0 <_vfiprintf_r>:
 8000cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cb4:	460d      	mov	r5, r1
 8000cb6:	b09d      	sub	sp, #116	@ 0x74
 8000cb8:	4614      	mov	r4, r2
 8000cba:	4698      	mov	r8, r3
 8000cbc:	4606      	mov	r6, r0
 8000cbe:	b118      	cbz	r0, 8000cc8 <_vfiprintf_r+0x18>
 8000cc0:	6a03      	ldr	r3, [r0, #32]
 8000cc2:	b90b      	cbnz	r3, 8000cc8 <_vfiprintf_r+0x18>
 8000cc4:	f7ff fdcc 	bl	8000860 <__sinit>
 8000cc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000cca:	07d9      	lsls	r1, r3, #31
 8000ccc:	d405      	bmi.n	8000cda <_vfiprintf_r+0x2a>
 8000cce:	89ab      	ldrh	r3, [r5, #12]
 8000cd0:	059a      	lsls	r2, r3, #22
 8000cd2:	d402      	bmi.n	8000cda <_vfiprintf_r+0x2a>
 8000cd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000cd6:	f7ff fec8 	bl	8000a6a <__retarget_lock_acquire_recursive>
 8000cda:	89ab      	ldrh	r3, [r5, #12]
 8000cdc:	071b      	lsls	r3, r3, #28
 8000cde:	d501      	bpl.n	8000ce4 <_vfiprintf_r+0x34>
 8000ce0:	692b      	ldr	r3, [r5, #16]
 8000ce2:	b99b      	cbnz	r3, 8000d0c <_vfiprintf_r+0x5c>
 8000ce4:	4629      	mov	r1, r5
 8000ce6:	4630      	mov	r0, r6
 8000ce8:	f000 fb6e 	bl	80013c8 <__swsetup_r>
 8000cec:	b170      	cbz	r0, 8000d0c <_vfiprintf_r+0x5c>
 8000cee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000cf0:	07dc      	lsls	r4, r3, #31
 8000cf2:	d504      	bpl.n	8000cfe <_vfiprintf_r+0x4e>
 8000cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf8:	b01d      	add	sp, #116	@ 0x74
 8000cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cfe:	89ab      	ldrh	r3, [r5, #12]
 8000d00:	0598      	lsls	r0, r3, #22
 8000d02:	d4f7      	bmi.n	8000cf4 <_vfiprintf_r+0x44>
 8000d04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000d06:	f7ff feb1 	bl	8000a6c <__retarget_lock_release_recursive>
 8000d0a:	e7f3      	b.n	8000cf4 <_vfiprintf_r+0x44>
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d10:	2320      	movs	r3, #32
 8000d12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000d16:	f8cd 800c 	str.w	r8, [sp, #12]
 8000d1a:	2330      	movs	r3, #48	@ 0x30
 8000d1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000ecc <_vfiprintf_r+0x21c>
 8000d20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000d24:	f04f 0901 	mov.w	r9, #1
 8000d28:	4623      	mov	r3, r4
 8000d2a:	469a      	mov	sl, r3
 8000d2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d30:	b10a      	cbz	r2, 8000d36 <_vfiprintf_r+0x86>
 8000d32:	2a25      	cmp	r2, #37	@ 0x25
 8000d34:	d1f9      	bne.n	8000d2a <_vfiprintf_r+0x7a>
 8000d36:	ebba 0b04 	subs.w	fp, sl, r4
 8000d3a:	d00b      	beq.n	8000d54 <_vfiprintf_r+0xa4>
 8000d3c:	465b      	mov	r3, fp
 8000d3e:	4622      	mov	r2, r4
 8000d40:	4629      	mov	r1, r5
 8000d42:	4630      	mov	r0, r6
 8000d44:	f7ff ffa1 	bl	8000c8a <__sfputs_r>
 8000d48:	3001      	adds	r0, #1
 8000d4a:	f000 80a7 	beq.w	8000e9c <_vfiprintf_r+0x1ec>
 8000d4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000d50:	445a      	add	r2, fp
 8000d52:	9209      	str	r2, [sp, #36]	@ 0x24
 8000d54:	f89a 3000 	ldrb.w	r3, [sl]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	f000 809f 	beq.w	8000e9c <_vfiprintf_r+0x1ec>
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f04f 32ff 	mov.w	r2, #4294967295
 8000d64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000d68:	f10a 0a01 	add.w	sl, sl, #1
 8000d6c:	9304      	str	r3, [sp, #16]
 8000d6e:	9307      	str	r3, [sp, #28]
 8000d70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000d74:	931a      	str	r3, [sp, #104]	@ 0x68
 8000d76:	4654      	mov	r4, sl
 8000d78:	2205      	movs	r2, #5
 8000d7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d7e:	4853      	ldr	r0, [pc, #332]	@ (8000ecc <_vfiprintf_r+0x21c>)
 8000d80:	f7ff fa46 	bl	8000210 <memchr>
 8000d84:	9a04      	ldr	r2, [sp, #16]
 8000d86:	b9d8      	cbnz	r0, 8000dc0 <_vfiprintf_r+0x110>
 8000d88:	06d1      	lsls	r1, r2, #27
 8000d8a:	bf44      	itt	mi
 8000d8c:	2320      	movmi	r3, #32
 8000d8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d92:	0713      	lsls	r3, r2, #28
 8000d94:	bf44      	itt	mi
 8000d96:	232b      	movmi	r3, #43	@ 0x2b
 8000d98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d9c:	f89a 3000 	ldrb.w	r3, [sl]
 8000da0:	2b2a      	cmp	r3, #42	@ 0x2a
 8000da2:	d015      	beq.n	8000dd0 <_vfiprintf_r+0x120>
 8000da4:	9a07      	ldr	r2, [sp, #28]
 8000da6:	4654      	mov	r4, sl
 8000da8:	2000      	movs	r0, #0
 8000daa:	f04f 0c0a 	mov.w	ip, #10
 8000dae:	4621      	mov	r1, r4
 8000db0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000db4:	3b30      	subs	r3, #48	@ 0x30
 8000db6:	2b09      	cmp	r3, #9
 8000db8:	d94b      	bls.n	8000e52 <_vfiprintf_r+0x1a2>
 8000dba:	b1b0      	cbz	r0, 8000dea <_vfiprintf_r+0x13a>
 8000dbc:	9207      	str	r2, [sp, #28]
 8000dbe:	e014      	b.n	8000dea <_vfiprintf_r+0x13a>
 8000dc0:	eba0 0308 	sub.w	r3, r0, r8
 8000dc4:	fa09 f303 	lsl.w	r3, r9, r3
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	9304      	str	r3, [sp, #16]
 8000dcc:	46a2      	mov	sl, r4
 8000dce:	e7d2      	b.n	8000d76 <_vfiprintf_r+0xc6>
 8000dd0:	9b03      	ldr	r3, [sp, #12]
 8000dd2:	1d19      	adds	r1, r3, #4
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	9103      	str	r1, [sp, #12]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	bfbb      	ittet	lt
 8000ddc:	425b      	neglt	r3, r3
 8000dde:	f042 0202 	orrlt.w	r2, r2, #2
 8000de2:	9307      	strge	r3, [sp, #28]
 8000de4:	9307      	strlt	r3, [sp, #28]
 8000de6:	bfb8      	it	lt
 8000de8:	9204      	strlt	r2, [sp, #16]
 8000dea:	7823      	ldrb	r3, [r4, #0]
 8000dec:	2b2e      	cmp	r3, #46	@ 0x2e
 8000dee:	d10a      	bne.n	8000e06 <_vfiprintf_r+0x156>
 8000df0:	7863      	ldrb	r3, [r4, #1]
 8000df2:	2b2a      	cmp	r3, #42	@ 0x2a
 8000df4:	d132      	bne.n	8000e5c <_vfiprintf_r+0x1ac>
 8000df6:	9b03      	ldr	r3, [sp, #12]
 8000df8:	1d1a      	adds	r2, r3, #4
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	9203      	str	r2, [sp, #12]
 8000dfe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000e02:	3402      	adds	r4, #2
 8000e04:	9305      	str	r3, [sp, #20]
 8000e06:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8000ed0 <_vfiprintf_r+0x220>
 8000e0a:	7821      	ldrb	r1, [r4, #0]
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	4650      	mov	r0, sl
 8000e10:	f7ff f9fe 	bl	8000210 <memchr>
 8000e14:	b138      	cbz	r0, 8000e26 <_vfiprintf_r+0x176>
 8000e16:	9b04      	ldr	r3, [sp, #16]
 8000e18:	eba0 000a 	sub.w	r0, r0, sl
 8000e1c:	2240      	movs	r2, #64	@ 0x40
 8000e1e:	4082      	lsls	r2, r0
 8000e20:	4313      	orrs	r3, r2
 8000e22:	3401      	adds	r4, #1
 8000e24:	9304      	str	r3, [sp, #16]
 8000e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e2a:	482a      	ldr	r0, [pc, #168]	@ (8000ed4 <_vfiprintf_r+0x224>)
 8000e2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000e30:	2206      	movs	r2, #6
 8000e32:	f7ff f9ed 	bl	8000210 <memchr>
 8000e36:	2800      	cmp	r0, #0
 8000e38:	d03f      	beq.n	8000eba <_vfiprintf_r+0x20a>
 8000e3a:	4b27      	ldr	r3, [pc, #156]	@ (8000ed8 <_vfiprintf_r+0x228>)
 8000e3c:	bb1b      	cbnz	r3, 8000e86 <_vfiprintf_r+0x1d6>
 8000e3e:	9b03      	ldr	r3, [sp, #12]
 8000e40:	3307      	adds	r3, #7
 8000e42:	f023 0307 	bic.w	r3, r3, #7
 8000e46:	3308      	adds	r3, #8
 8000e48:	9303      	str	r3, [sp, #12]
 8000e4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000e4c:	443b      	add	r3, r7
 8000e4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8000e50:	e76a      	b.n	8000d28 <_vfiprintf_r+0x78>
 8000e52:	fb0c 3202 	mla	r2, ip, r2, r3
 8000e56:	460c      	mov	r4, r1
 8000e58:	2001      	movs	r0, #1
 8000e5a:	e7a8      	b.n	8000dae <_vfiprintf_r+0xfe>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	3401      	adds	r4, #1
 8000e60:	9305      	str	r3, [sp, #20]
 8000e62:	4619      	mov	r1, r3
 8000e64:	f04f 0c0a 	mov.w	ip, #10
 8000e68:	4620      	mov	r0, r4
 8000e6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e6e:	3a30      	subs	r2, #48	@ 0x30
 8000e70:	2a09      	cmp	r2, #9
 8000e72:	d903      	bls.n	8000e7c <_vfiprintf_r+0x1cc>
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d0c6      	beq.n	8000e06 <_vfiprintf_r+0x156>
 8000e78:	9105      	str	r1, [sp, #20]
 8000e7a:	e7c4      	b.n	8000e06 <_vfiprintf_r+0x156>
 8000e7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8000e80:	4604      	mov	r4, r0
 8000e82:	2301      	movs	r3, #1
 8000e84:	e7f0      	b.n	8000e68 <_vfiprintf_r+0x1b8>
 8000e86:	ab03      	add	r3, sp, #12
 8000e88:	9300      	str	r3, [sp, #0]
 8000e8a:	462a      	mov	r2, r5
 8000e8c:	4b13      	ldr	r3, [pc, #76]	@ (8000edc <_vfiprintf_r+0x22c>)
 8000e8e:	a904      	add	r1, sp, #16
 8000e90:	4630      	mov	r0, r6
 8000e92:	f3af 8000 	nop.w
 8000e96:	4607      	mov	r7, r0
 8000e98:	1c78      	adds	r0, r7, #1
 8000e9a:	d1d6      	bne.n	8000e4a <_vfiprintf_r+0x19a>
 8000e9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000e9e:	07d9      	lsls	r1, r3, #31
 8000ea0:	d405      	bmi.n	8000eae <_vfiprintf_r+0x1fe>
 8000ea2:	89ab      	ldrh	r3, [r5, #12]
 8000ea4:	059a      	lsls	r2, r3, #22
 8000ea6:	d402      	bmi.n	8000eae <_vfiprintf_r+0x1fe>
 8000ea8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000eaa:	f7ff fddf 	bl	8000a6c <__retarget_lock_release_recursive>
 8000eae:	89ab      	ldrh	r3, [r5, #12]
 8000eb0:	065b      	lsls	r3, r3, #25
 8000eb2:	f53f af1f 	bmi.w	8000cf4 <_vfiprintf_r+0x44>
 8000eb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000eb8:	e71e      	b.n	8000cf8 <_vfiprintf_r+0x48>
 8000eba:	ab03      	add	r3, sp, #12
 8000ebc:	9300      	str	r3, [sp, #0]
 8000ebe:	462a      	mov	r2, r5
 8000ec0:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <_vfiprintf_r+0x22c>)
 8000ec2:	a904      	add	r1, sp, #16
 8000ec4:	4630      	mov	r0, r6
 8000ec6:	f000 f879 	bl	8000fbc <_printf_i>
 8000eca:	e7e4      	b.n	8000e96 <_vfiprintf_r+0x1e6>
 8000ecc:	080015b9 	.word	0x080015b9
 8000ed0:	080015bf 	.word	0x080015bf
 8000ed4:	080015c3 	.word	0x080015c3
 8000ed8:	00000000 	.word	0x00000000
 8000edc:	08000c8b 	.word	0x08000c8b

08000ee0 <_printf_common>:
 8000ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ee4:	4616      	mov	r6, r2
 8000ee6:	4698      	mov	r8, r3
 8000ee8:	688a      	ldr	r2, [r1, #8]
 8000eea:	690b      	ldr	r3, [r1, #16]
 8000eec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	bfb8      	it	lt
 8000ef4:	4613      	movlt	r3, r2
 8000ef6:	6033      	str	r3, [r6, #0]
 8000ef8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000efc:	4607      	mov	r7, r0
 8000efe:	460c      	mov	r4, r1
 8000f00:	b10a      	cbz	r2, 8000f06 <_printf_common+0x26>
 8000f02:	3301      	adds	r3, #1
 8000f04:	6033      	str	r3, [r6, #0]
 8000f06:	6823      	ldr	r3, [r4, #0]
 8000f08:	0699      	lsls	r1, r3, #26
 8000f0a:	bf42      	ittt	mi
 8000f0c:	6833      	ldrmi	r3, [r6, #0]
 8000f0e:	3302      	addmi	r3, #2
 8000f10:	6033      	strmi	r3, [r6, #0]
 8000f12:	6825      	ldr	r5, [r4, #0]
 8000f14:	f015 0506 	ands.w	r5, r5, #6
 8000f18:	d106      	bne.n	8000f28 <_printf_common+0x48>
 8000f1a:	f104 0a19 	add.w	sl, r4, #25
 8000f1e:	68e3      	ldr	r3, [r4, #12]
 8000f20:	6832      	ldr	r2, [r6, #0]
 8000f22:	1a9b      	subs	r3, r3, r2
 8000f24:	42ab      	cmp	r3, r5
 8000f26:	dc26      	bgt.n	8000f76 <_printf_common+0x96>
 8000f28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000f2c:	6822      	ldr	r2, [r4, #0]
 8000f2e:	3b00      	subs	r3, #0
 8000f30:	bf18      	it	ne
 8000f32:	2301      	movne	r3, #1
 8000f34:	0692      	lsls	r2, r2, #26
 8000f36:	d42b      	bmi.n	8000f90 <_printf_common+0xb0>
 8000f38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000f3c:	4641      	mov	r1, r8
 8000f3e:	4638      	mov	r0, r7
 8000f40:	47c8      	blx	r9
 8000f42:	3001      	adds	r0, #1
 8000f44:	d01e      	beq.n	8000f84 <_printf_common+0xa4>
 8000f46:	6823      	ldr	r3, [r4, #0]
 8000f48:	6922      	ldr	r2, [r4, #16]
 8000f4a:	f003 0306 	and.w	r3, r3, #6
 8000f4e:	2b04      	cmp	r3, #4
 8000f50:	bf02      	ittt	eq
 8000f52:	68e5      	ldreq	r5, [r4, #12]
 8000f54:	6833      	ldreq	r3, [r6, #0]
 8000f56:	1aed      	subeq	r5, r5, r3
 8000f58:	68a3      	ldr	r3, [r4, #8]
 8000f5a:	bf0c      	ite	eq
 8000f5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000f60:	2500      	movne	r5, #0
 8000f62:	4293      	cmp	r3, r2
 8000f64:	bfc4      	itt	gt
 8000f66:	1a9b      	subgt	r3, r3, r2
 8000f68:	18ed      	addgt	r5, r5, r3
 8000f6a:	2600      	movs	r6, #0
 8000f6c:	341a      	adds	r4, #26
 8000f6e:	42b5      	cmp	r5, r6
 8000f70:	d11a      	bne.n	8000fa8 <_printf_common+0xc8>
 8000f72:	2000      	movs	r0, #0
 8000f74:	e008      	b.n	8000f88 <_printf_common+0xa8>
 8000f76:	2301      	movs	r3, #1
 8000f78:	4652      	mov	r2, sl
 8000f7a:	4641      	mov	r1, r8
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	47c8      	blx	r9
 8000f80:	3001      	adds	r0, #1
 8000f82:	d103      	bne.n	8000f8c <_printf_common+0xac>
 8000f84:	f04f 30ff 	mov.w	r0, #4294967295
 8000f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8c:	3501      	adds	r5, #1
 8000f8e:	e7c6      	b.n	8000f1e <_printf_common+0x3e>
 8000f90:	18e1      	adds	r1, r4, r3
 8000f92:	1c5a      	adds	r2, r3, #1
 8000f94:	2030      	movs	r0, #48	@ 0x30
 8000f96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000f9a:	4422      	add	r2, r4
 8000f9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000fa0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000fa4:	3302      	adds	r3, #2
 8000fa6:	e7c7      	b.n	8000f38 <_printf_common+0x58>
 8000fa8:	2301      	movs	r3, #1
 8000faa:	4622      	mov	r2, r4
 8000fac:	4641      	mov	r1, r8
 8000fae:	4638      	mov	r0, r7
 8000fb0:	47c8      	blx	r9
 8000fb2:	3001      	adds	r0, #1
 8000fb4:	d0e6      	beq.n	8000f84 <_printf_common+0xa4>
 8000fb6:	3601      	adds	r6, #1
 8000fb8:	e7d9      	b.n	8000f6e <_printf_common+0x8e>
	...

08000fbc <_printf_i>:
 8000fbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000fc0:	7e0f      	ldrb	r7, [r1, #24]
 8000fc2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000fc4:	2f78      	cmp	r7, #120	@ 0x78
 8000fc6:	4691      	mov	r9, r2
 8000fc8:	4680      	mov	r8, r0
 8000fca:	460c      	mov	r4, r1
 8000fcc:	469a      	mov	sl, r3
 8000fce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000fd2:	d807      	bhi.n	8000fe4 <_printf_i+0x28>
 8000fd4:	2f62      	cmp	r7, #98	@ 0x62
 8000fd6:	d80a      	bhi.n	8000fee <_printf_i+0x32>
 8000fd8:	2f00      	cmp	r7, #0
 8000fda:	f000 80d2 	beq.w	8001182 <_printf_i+0x1c6>
 8000fde:	2f58      	cmp	r7, #88	@ 0x58
 8000fe0:	f000 80b9 	beq.w	8001156 <_printf_i+0x19a>
 8000fe4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000fe8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000fec:	e03a      	b.n	8001064 <_printf_i+0xa8>
 8000fee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000ff2:	2b15      	cmp	r3, #21
 8000ff4:	d8f6      	bhi.n	8000fe4 <_printf_i+0x28>
 8000ff6:	a101      	add	r1, pc, #4	@ (adr r1, 8000ffc <_printf_i+0x40>)
 8000ff8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000ffc:	08001055 	.word	0x08001055
 8001000:	08001069 	.word	0x08001069
 8001004:	08000fe5 	.word	0x08000fe5
 8001008:	08000fe5 	.word	0x08000fe5
 800100c:	08000fe5 	.word	0x08000fe5
 8001010:	08000fe5 	.word	0x08000fe5
 8001014:	08001069 	.word	0x08001069
 8001018:	08000fe5 	.word	0x08000fe5
 800101c:	08000fe5 	.word	0x08000fe5
 8001020:	08000fe5 	.word	0x08000fe5
 8001024:	08000fe5 	.word	0x08000fe5
 8001028:	08001169 	.word	0x08001169
 800102c:	08001093 	.word	0x08001093
 8001030:	08001123 	.word	0x08001123
 8001034:	08000fe5 	.word	0x08000fe5
 8001038:	08000fe5 	.word	0x08000fe5
 800103c:	0800118b 	.word	0x0800118b
 8001040:	08000fe5 	.word	0x08000fe5
 8001044:	08001093 	.word	0x08001093
 8001048:	08000fe5 	.word	0x08000fe5
 800104c:	08000fe5 	.word	0x08000fe5
 8001050:	0800112b 	.word	0x0800112b
 8001054:	6833      	ldr	r3, [r6, #0]
 8001056:	1d1a      	adds	r2, r3, #4
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	6032      	str	r2, [r6, #0]
 800105c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001060:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001064:	2301      	movs	r3, #1
 8001066:	e09d      	b.n	80011a4 <_printf_i+0x1e8>
 8001068:	6833      	ldr	r3, [r6, #0]
 800106a:	6820      	ldr	r0, [r4, #0]
 800106c:	1d19      	adds	r1, r3, #4
 800106e:	6031      	str	r1, [r6, #0]
 8001070:	0606      	lsls	r6, r0, #24
 8001072:	d501      	bpl.n	8001078 <_printf_i+0xbc>
 8001074:	681d      	ldr	r5, [r3, #0]
 8001076:	e003      	b.n	8001080 <_printf_i+0xc4>
 8001078:	0645      	lsls	r5, r0, #25
 800107a:	d5fb      	bpl.n	8001074 <_printf_i+0xb8>
 800107c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001080:	2d00      	cmp	r5, #0
 8001082:	da03      	bge.n	800108c <_printf_i+0xd0>
 8001084:	232d      	movs	r3, #45	@ 0x2d
 8001086:	426d      	negs	r5, r5
 8001088:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800108c:	4859      	ldr	r0, [pc, #356]	@ (80011f4 <_printf_i+0x238>)
 800108e:	230a      	movs	r3, #10
 8001090:	e011      	b.n	80010b6 <_printf_i+0xfa>
 8001092:	6821      	ldr	r1, [r4, #0]
 8001094:	6833      	ldr	r3, [r6, #0]
 8001096:	0608      	lsls	r0, r1, #24
 8001098:	f853 5b04 	ldr.w	r5, [r3], #4
 800109c:	d402      	bmi.n	80010a4 <_printf_i+0xe8>
 800109e:	0649      	lsls	r1, r1, #25
 80010a0:	bf48      	it	mi
 80010a2:	b2ad      	uxthmi	r5, r5
 80010a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80010a6:	4853      	ldr	r0, [pc, #332]	@ (80011f4 <_printf_i+0x238>)
 80010a8:	6033      	str	r3, [r6, #0]
 80010aa:	bf14      	ite	ne
 80010ac:	230a      	movne	r3, #10
 80010ae:	2308      	moveq	r3, #8
 80010b0:	2100      	movs	r1, #0
 80010b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80010b6:	6866      	ldr	r6, [r4, #4]
 80010b8:	60a6      	str	r6, [r4, #8]
 80010ba:	2e00      	cmp	r6, #0
 80010bc:	bfa2      	ittt	ge
 80010be:	6821      	ldrge	r1, [r4, #0]
 80010c0:	f021 0104 	bicge.w	r1, r1, #4
 80010c4:	6021      	strge	r1, [r4, #0]
 80010c6:	b90d      	cbnz	r5, 80010cc <_printf_i+0x110>
 80010c8:	2e00      	cmp	r6, #0
 80010ca:	d04b      	beq.n	8001164 <_printf_i+0x1a8>
 80010cc:	4616      	mov	r6, r2
 80010ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80010d2:	fb03 5711 	mls	r7, r3, r1, r5
 80010d6:	5dc7      	ldrb	r7, [r0, r7]
 80010d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80010dc:	462f      	mov	r7, r5
 80010de:	42bb      	cmp	r3, r7
 80010e0:	460d      	mov	r5, r1
 80010e2:	d9f4      	bls.n	80010ce <_printf_i+0x112>
 80010e4:	2b08      	cmp	r3, #8
 80010e6:	d10b      	bne.n	8001100 <_printf_i+0x144>
 80010e8:	6823      	ldr	r3, [r4, #0]
 80010ea:	07df      	lsls	r7, r3, #31
 80010ec:	d508      	bpl.n	8001100 <_printf_i+0x144>
 80010ee:	6923      	ldr	r3, [r4, #16]
 80010f0:	6861      	ldr	r1, [r4, #4]
 80010f2:	4299      	cmp	r1, r3
 80010f4:	bfde      	ittt	le
 80010f6:	2330      	movle	r3, #48	@ 0x30
 80010f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80010fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001100:	1b92      	subs	r2, r2, r6
 8001102:	6122      	str	r2, [r4, #16]
 8001104:	f8cd a000 	str.w	sl, [sp]
 8001108:	464b      	mov	r3, r9
 800110a:	aa03      	add	r2, sp, #12
 800110c:	4621      	mov	r1, r4
 800110e:	4640      	mov	r0, r8
 8001110:	f7ff fee6 	bl	8000ee0 <_printf_common>
 8001114:	3001      	adds	r0, #1
 8001116:	d14a      	bne.n	80011ae <_printf_i+0x1f2>
 8001118:	f04f 30ff 	mov.w	r0, #4294967295
 800111c:	b004      	add	sp, #16
 800111e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001122:	6823      	ldr	r3, [r4, #0]
 8001124:	f043 0320 	orr.w	r3, r3, #32
 8001128:	6023      	str	r3, [r4, #0]
 800112a:	4833      	ldr	r0, [pc, #204]	@ (80011f8 <_printf_i+0x23c>)
 800112c:	2778      	movs	r7, #120	@ 0x78
 800112e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001132:	6823      	ldr	r3, [r4, #0]
 8001134:	6831      	ldr	r1, [r6, #0]
 8001136:	061f      	lsls	r7, r3, #24
 8001138:	f851 5b04 	ldr.w	r5, [r1], #4
 800113c:	d402      	bmi.n	8001144 <_printf_i+0x188>
 800113e:	065f      	lsls	r7, r3, #25
 8001140:	bf48      	it	mi
 8001142:	b2ad      	uxthmi	r5, r5
 8001144:	6031      	str	r1, [r6, #0]
 8001146:	07d9      	lsls	r1, r3, #31
 8001148:	bf44      	itt	mi
 800114a:	f043 0320 	orrmi.w	r3, r3, #32
 800114e:	6023      	strmi	r3, [r4, #0]
 8001150:	b11d      	cbz	r5, 800115a <_printf_i+0x19e>
 8001152:	2310      	movs	r3, #16
 8001154:	e7ac      	b.n	80010b0 <_printf_i+0xf4>
 8001156:	4827      	ldr	r0, [pc, #156]	@ (80011f4 <_printf_i+0x238>)
 8001158:	e7e9      	b.n	800112e <_printf_i+0x172>
 800115a:	6823      	ldr	r3, [r4, #0]
 800115c:	f023 0320 	bic.w	r3, r3, #32
 8001160:	6023      	str	r3, [r4, #0]
 8001162:	e7f6      	b.n	8001152 <_printf_i+0x196>
 8001164:	4616      	mov	r6, r2
 8001166:	e7bd      	b.n	80010e4 <_printf_i+0x128>
 8001168:	6833      	ldr	r3, [r6, #0]
 800116a:	6825      	ldr	r5, [r4, #0]
 800116c:	6961      	ldr	r1, [r4, #20]
 800116e:	1d18      	adds	r0, r3, #4
 8001170:	6030      	str	r0, [r6, #0]
 8001172:	062e      	lsls	r6, r5, #24
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	d501      	bpl.n	800117c <_printf_i+0x1c0>
 8001178:	6019      	str	r1, [r3, #0]
 800117a:	e002      	b.n	8001182 <_printf_i+0x1c6>
 800117c:	0668      	lsls	r0, r5, #25
 800117e:	d5fb      	bpl.n	8001178 <_printf_i+0x1bc>
 8001180:	8019      	strh	r1, [r3, #0]
 8001182:	2300      	movs	r3, #0
 8001184:	6123      	str	r3, [r4, #16]
 8001186:	4616      	mov	r6, r2
 8001188:	e7bc      	b.n	8001104 <_printf_i+0x148>
 800118a:	6833      	ldr	r3, [r6, #0]
 800118c:	1d1a      	adds	r2, r3, #4
 800118e:	6032      	str	r2, [r6, #0]
 8001190:	681e      	ldr	r6, [r3, #0]
 8001192:	6862      	ldr	r2, [r4, #4]
 8001194:	2100      	movs	r1, #0
 8001196:	4630      	mov	r0, r6
 8001198:	f7ff f83a 	bl	8000210 <memchr>
 800119c:	b108      	cbz	r0, 80011a2 <_printf_i+0x1e6>
 800119e:	1b80      	subs	r0, r0, r6
 80011a0:	6060      	str	r0, [r4, #4]
 80011a2:	6863      	ldr	r3, [r4, #4]
 80011a4:	6123      	str	r3, [r4, #16]
 80011a6:	2300      	movs	r3, #0
 80011a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80011ac:	e7aa      	b.n	8001104 <_printf_i+0x148>
 80011ae:	6923      	ldr	r3, [r4, #16]
 80011b0:	4632      	mov	r2, r6
 80011b2:	4649      	mov	r1, r9
 80011b4:	4640      	mov	r0, r8
 80011b6:	47d0      	blx	sl
 80011b8:	3001      	adds	r0, #1
 80011ba:	d0ad      	beq.n	8001118 <_printf_i+0x15c>
 80011bc:	6823      	ldr	r3, [r4, #0]
 80011be:	079b      	lsls	r3, r3, #30
 80011c0:	d413      	bmi.n	80011ea <_printf_i+0x22e>
 80011c2:	68e0      	ldr	r0, [r4, #12]
 80011c4:	9b03      	ldr	r3, [sp, #12]
 80011c6:	4298      	cmp	r0, r3
 80011c8:	bfb8      	it	lt
 80011ca:	4618      	movlt	r0, r3
 80011cc:	e7a6      	b.n	800111c <_printf_i+0x160>
 80011ce:	2301      	movs	r3, #1
 80011d0:	4632      	mov	r2, r6
 80011d2:	4649      	mov	r1, r9
 80011d4:	4640      	mov	r0, r8
 80011d6:	47d0      	blx	sl
 80011d8:	3001      	adds	r0, #1
 80011da:	d09d      	beq.n	8001118 <_printf_i+0x15c>
 80011dc:	3501      	adds	r5, #1
 80011de:	68e3      	ldr	r3, [r4, #12]
 80011e0:	9903      	ldr	r1, [sp, #12]
 80011e2:	1a5b      	subs	r3, r3, r1
 80011e4:	42ab      	cmp	r3, r5
 80011e6:	dcf2      	bgt.n	80011ce <_printf_i+0x212>
 80011e8:	e7eb      	b.n	80011c2 <_printf_i+0x206>
 80011ea:	2500      	movs	r5, #0
 80011ec:	f104 0619 	add.w	r6, r4, #25
 80011f0:	e7f5      	b.n	80011de <_printf_i+0x222>
 80011f2:	bf00      	nop
 80011f4:	080015ca 	.word	0x080015ca
 80011f8:	080015db 	.word	0x080015db

080011fc <__sflush_r>:
 80011fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001202:	0716      	lsls	r6, r2, #28
 8001204:	4605      	mov	r5, r0
 8001206:	460c      	mov	r4, r1
 8001208:	d454      	bmi.n	80012b4 <__sflush_r+0xb8>
 800120a:	684b      	ldr	r3, [r1, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	dc02      	bgt.n	8001216 <__sflush_r+0x1a>
 8001210:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001212:	2b00      	cmp	r3, #0
 8001214:	dd48      	ble.n	80012a8 <__sflush_r+0xac>
 8001216:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001218:	2e00      	cmp	r6, #0
 800121a:	d045      	beq.n	80012a8 <__sflush_r+0xac>
 800121c:	2300      	movs	r3, #0
 800121e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001222:	682f      	ldr	r7, [r5, #0]
 8001224:	6a21      	ldr	r1, [r4, #32]
 8001226:	602b      	str	r3, [r5, #0]
 8001228:	d030      	beq.n	800128c <__sflush_r+0x90>
 800122a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800122c:	89a3      	ldrh	r3, [r4, #12]
 800122e:	0759      	lsls	r1, r3, #29
 8001230:	d505      	bpl.n	800123e <__sflush_r+0x42>
 8001232:	6863      	ldr	r3, [r4, #4]
 8001234:	1ad2      	subs	r2, r2, r3
 8001236:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001238:	b10b      	cbz	r3, 800123e <__sflush_r+0x42>
 800123a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800123c:	1ad2      	subs	r2, r2, r3
 800123e:	2300      	movs	r3, #0
 8001240:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001242:	6a21      	ldr	r1, [r4, #32]
 8001244:	4628      	mov	r0, r5
 8001246:	47b0      	blx	r6
 8001248:	1c43      	adds	r3, r0, #1
 800124a:	89a3      	ldrh	r3, [r4, #12]
 800124c:	d106      	bne.n	800125c <__sflush_r+0x60>
 800124e:	6829      	ldr	r1, [r5, #0]
 8001250:	291d      	cmp	r1, #29
 8001252:	d82b      	bhi.n	80012ac <__sflush_r+0xb0>
 8001254:	4a28      	ldr	r2, [pc, #160]	@ (80012f8 <__sflush_r+0xfc>)
 8001256:	410a      	asrs	r2, r1
 8001258:	07d6      	lsls	r6, r2, #31
 800125a:	d427      	bmi.n	80012ac <__sflush_r+0xb0>
 800125c:	2200      	movs	r2, #0
 800125e:	6062      	str	r2, [r4, #4]
 8001260:	04d9      	lsls	r1, r3, #19
 8001262:	6922      	ldr	r2, [r4, #16]
 8001264:	6022      	str	r2, [r4, #0]
 8001266:	d504      	bpl.n	8001272 <__sflush_r+0x76>
 8001268:	1c42      	adds	r2, r0, #1
 800126a:	d101      	bne.n	8001270 <__sflush_r+0x74>
 800126c:	682b      	ldr	r3, [r5, #0]
 800126e:	b903      	cbnz	r3, 8001272 <__sflush_r+0x76>
 8001270:	6560      	str	r0, [r4, #84]	@ 0x54
 8001272:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001274:	602f      	str	r7, [r5, #0]
 8001276:	b1b9      	cbz	r1, 80012a8 <__sflush_r+0xac>
 8001278:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800127c:	4299      	cmp	r1, r3
 800127e:	d002      	beq.n	8001286 <__sflush_r+0x8a>
 8001280:	4628      	mov	r0, r5
 8001282:	f7ff fbf5 	bl	8000a70 <_free_r>
 8001286:	2300      	movs	r3, #0
 8001288:	6363      	str	r3, [r4, #52]	@ 0x34
 800128a:	e00d      	b.n	80012a8 <__sflush_r+0xac>
 800128c:	2301      	movs	r3, #1
 800128e:	4628      	mov	r0, r5
 8001290:	47b0      	blx	r6
 8001292:	4602      	mov	r2, r0
 8001294:	1c50      	adds	r0, r2, #1
 8001296:	d1c9      	bne.n	800122c <__sflush_r+0x30>
 8001298:	682b      	ldr	r3, [r5, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d0c6      	beq.n	800122c <__sflush_r+0x30>
 800129e:	2b1d      	cmp	r3, #29
 80012a0:	d001      	beq.n	80012a6 <__sflush_r+0xaa>
 80012a2:	2b16      	cmp	r3, #22
 80012a4:	d11d      	bne.n	80012e2 <__sflush_r+0xe6>
 80012a6:	602f      	str	r7, [r5, #0]
 80012a8:	2000      	movs	r0, #0
 80012aa:	e021      	b.n	80012f0 <__sflush_r+0xf4>
 80012ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012b0:	b21b      	sxth	r3, r3
 80012b2:	e01a      	b.n	80012ea <__sflush_r+0xee>
 80012b4:	690f      	ldr	r7, [r1, #16]
 80012b6:	2f00      	cmp	r7, #0
 80012b8:	d0f6      	beq.n	80012a8 <__sflush_r+0xac>
 80012ba:	0793      	lsls	r3, r2, #30
 80012bc:	680e      	ldr	r6, [r1, #0]
 80012be:	bf08      	it	eq
 80012c0:	694b      	ldreq	r3, [r1, #20]
 80012c2:	600f      	str	r7, [r1, #0]
 80012c4:	bf18      	it	ne
 80012c6:	2300      	movne	r3, #0
 80012c8:	1bf6      	subs	r6, r6, r7
 80012ca:	608b      	str	r3, [r1, #8]
 80012cc:	2e00      	cmp	r6, #0
 80012ce:	ddeb      	ble.n	80012a8 <__sflush_r+0xac>
 80012d0:	6a21      	ldr	r1, [r4, #32]
 80012d2:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80012d6:	4633      	mov	r3, r6
 80012d8:	463a      	mov	r2, r7
 80012da:	4628      	mov	r0, r5
 80012dc:	47e0      	blx	ip
 80012de:	2800      	cmp	r0, #0
 80012e0:	dc07      	bgt.n	80012f2 <__sflush_r+0xf6>
 80012e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012ea:	81a3      	strh	r3, [r4, #12]
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295
 80012f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012f2:	4407      	add	r7, r0
 80012f4:	1a36      	subs	r6, r6, r0
 80012f6:	e7e9      	b.n	80012cc <__sflush_r+0xd0>
 80012f8:	dfbffffe 	.word	0xdfbffffe

080012fc <_fflush_r>:
 80012fc:	b538      	push	{r3, r4, r5, lr}
 80012fe:	690b      	ldr	r3, [r1, #16]
 8001300:	4605      	mov	r5, r0
 8001302:	460c      	mov	r4, r1
 8001304:	b913      	cbnz	r3, 800130c <_fflush_r+0x10>
 8001306:	2500      	movs	r5, #0
 8001308:	4628      	mov	r0, r5
 800130a:	bd38      	pop	{r3, r4, r5, pc}
 800130c:	b118      	cbz	r0, 8001316 <_fflush_r+0x1a>
 800130e:	6a03      	ldr	r3, [r0, #32]
 8001310:	b90b      	cbnz	r3, 8001316 <_fflush_r+0x1a>
 8001312:	f7ff faa5 	bl	8000860 <__sinit>
 8001316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0f3      	beq.n	8001306 <_fflush_r+0xa>
 800131e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001320:	07d0      	lsls	r0, r2, #31
 8001322:	d404      	bmi.n	800132e <_fflush_r+0x32>
 8001324:	0599      	lsls	r1, r3, #22
 8001326:	d402      	bmi.n	800132e <_fflush_r+0x32>
 8001328:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800132a:	f7ff fb9e 	bl	8000a6a <__retarget_lock_acquire_recursive>
 800132e:	4628      	mov	r0, r5
 8001330:	4621      	mov	r1, r4
 8001332:	f7ff ff63 	bl	80011fc <__sflush_r>
 8001336:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001338:	07da      	lsls	r2, r3, #31
 800133a:	4605      	mov	r5, r0
 800133c:	d4e4      	bmi.n	8001308 <_fflush_r+0xc>
 800133e:	89a3      	ldrh	r3, [r4, #12]
 8001340:	059b      	lsls	r3, r3, #22
 8001342:	d4e1      	bmi.n	8001308 <_fflush_r+0xc>
 8001344:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001346:	f7ff fb91 	bl	8000a6c <__retarget_lock_release_recursive>
 800134a:	e7dd      	b.n	8001308 <_fflush_r+0xc>

0800134c <__swbuf_r>:
 800134c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800134e:	460e      	mov	r6, r1
 8001350:	4614      	mov	r4, r2
 8001352:	4605      	mov	r5, r0
 8001354:	b118      	cbz	r0, 800135e <__swbuf_r+0x12>
 8001356:	6a03      	ldr	r3, [r0, #32]
 8001358:	b90b      	cbnz	r3, 800135e <__swbuf_r+0x12>
 800135a:	f7ff fa81 	bl	8000860 <__sinit>
 800135e:	69a3      	ldr	r3, [r4, #24]
 8001360:	60a3      	str	r3, [r4, #8]
 8001362:	89a3      	ldrh	r3, [r4, #12]
 8001364:	071a      	lsls	r2, r3, #28
 8001366:	d501      	bpl.n	800136c <__swbuf_r+0x20>
 8001368:	6923      	ldr	r3, [r4, #16]
 800136a:	b943      	cbnz	r3, 800137e <__swbuf_r+0x32>
 800136c:	4621      	mov	r1, r4
 800136e:	4628      	mov	r0, r5
 8001370:	f000 f82a 	bl	80013c8 <__swsetup_r>
 8001374:	b118      	cbz	r0, 800137e <__swbuf_r+0x32>
 8001376:	f04f 37ff 	mov.w	r7, #4294967295
 800137a:	4638      	mov	r0, r7
 800137c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800137e:	6823      	ldr	r3, [r4, #0]
 8001380:	6922      	ldr	r2, [r4, #16]
 8001382:	1a98      	subs	r0, r3, r2
 8001384:	6963      	ldr	r3, [r4, #20]
 8001386:	b2f6      	uxtb	r6, r6
 8001388:	4283      	cmp	r3, r0
 800138a:	4637      	mov	r7, r6
 800138c:	dc05      	bgt.n	800139a <__swbuf_r+0x4e>
 800138e:	4621      	mov	r1, r4
 8001390:	4628      	mov	r0, r5
 8001392:	f7ff ffb3 	bl	80012fc <_fflush_r>
 8001396:	2800      	cmp	r0, #0
 8001398:	d1ed      	bne.n	8001376 <__swbuf_r+0x2a>
 800139a:	68a3      	ldr	r3, [r4, #8]
 800139c:	3b01      	subs	r3, #1
 800139e:	60a3      	str	r3, [r4, #8]
 80013a0:	6823      	ldr	r3, [r4, #0]
 80013a2:	1c5a      	adds	r2, r3, #1
 80013a4:	6022      	str	r2, [r4, #0]
 80013a6:	701e      	strb	r6, [r3, #0]
 80013a8:	6962      	ldr	r2, [r4, #20]
 80013aa:	1c43      	adds	r3, r0, #1
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d004      	beq.n	80013ba <__swbuf_r+0x6e>
 80013b0:	89a3      	ldrh	r3, [r4, #12]
 80013b2:	07db      	lsls	r3, r3, #31
 80013b4:	d5e1      	bpl.n	800137a <__swbuf_r+0x2e>
 80013b6:	2e0a      	cmp	r6, #10
 80013b8:	d1df      	bne.n	800137a <__swbuf_r+0x2e>
 80013ba:	4621      	mov	r1, r4
 80013bc:	4628      	mov	r0, r5
 80013be:	f7ff ff9d 	bl	80012fc <_fflush_r>
 80013c2:	2800      	cmp	r0, #0
 80013c4:	d0d9      	beq.n	800137a <__swbuf_r+0x2e>
 80013c6:	e7d6      	b.n	8001376 <__swbuf_r+0x2a>

080013c8 <__swsetup_r>:
 80013c8:	b538      	push	{r3, r4, r5, lr}
 80013ca:	4b29      	ldr	r3, [pc, #164]	@ (8001470 <__swsetup_r+0xa8>)
 80013cc:	4605      	mov	r5, r0
 80013ce:	6818      	ldr	r0, [r3, #0]
 80013d0:	460c      	mov	r4, r1
 80013d2:	b118      	cbz	r0, 80013dc <__swsetup_r+0x14>
 80013d4:	6a03      	ldr	r3, [r0, #32]
 80013d6:	b90b      	cbnz	r3, 80013dc <__swsetup_r+0x14>
 80013d8:	f7ff fa42 	bl	8000860 <__sinit>
 80013dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013e0:	0719      	lsls	r1, r3, #28
 80013e2:	d422      	bmi.n	800142a <__swsetup_r+0x62>
 80013e4:	06da      	lsls	r2, r3, #27
 80013e6:	d407      	bmi.n	80013f8 <__swsetup_r+0x30>
 80013e8:	2209      	movs	r2, #9
 80013ea:	602a      	str	r2, [r5, #0]
 80013ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013f0:	81a3      	strh	r3, [r4, #12]
 80013f2:	f04f 30ff 	mov.w	r0, #4294967295
 80013f6:	e033      	b.n	8001460 <__swsetup_r+0x98>
 80013f8:	0758      	lsls	r0, r3, #29
 80013fa:	d512      	bpl.n	8001422 <__swsetup_r+0x5a>
 80013fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80013fe:	b141      	cbz	r1, 8001412 <__swsetup_r+0x4a>
 8001400:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001404:	4299      	cmp	r1, r3
 8001406:	d002      	beq.n	800140e <__swsetup_r+0x46>
 8001408:	4628      	mov	r0, r5
 800140a:	f7ff fb31 	bl	8000a70 <_free_r>
 800140e:	2300      	movs	r3, #0
 8001410:	6363      	str	r3, [r4, #52]	@ 0x34
 8001412:	89a3      	ldrh	r3, [r4, #12]
 8001414:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001418:	81a3      	strh	r3, [r4, #12]
 800141a:	2300      	movs	r3, #0
 800141c:	6063      	str	r3, [r4, #4]
 800141e:	6923      	ldr	r3, [r4, #16]
 8001420:	6023      	str	r3, [r4, #0]
 8001422:	89a3      	ldrh	r3, [r4, #12]
 8001424:	f043 0308 	orr.w	r3, r3, #8
 8001428:	81a3      	strh	r3, [r4, #12]
 800142a:	6923      	ldr	r3, [r4, #16]
 800142c:	b94b      	cbnz	r3, 8001442 <__swsetup_r+0x7a>
 800142e:	89a3      	ldrh	r3, [r4, #12]
 8001430:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001434:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001438:	d003      	beq.n	8001442 <__swsetup_r+0x7a>
 800143a:	4621      	mov	r1, r4
 800143c:	4628      	mov	r0, r5
 800143e:	f000 f84f 	bl	80014e0 <__smakebuf_r>
 8001442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001446:	f013 0201 	ands.w	r2, r3, #1
 800144a:	d00a      	beq.n	8001462 <__swsetup_r+0x9a>
 800144c:	2200      	movs	r2, #0
 800144e:	60a2      	str	r2, [r4, #8]
 8001450:	6962      	ldr	r2, [r4, #20]
 8001452:	4252      	negs	r2, r2
 8001454:	61a2      	str	r2, [r4, #24]
 8001456:	6922      	ldr	r2, [r4, #16]
 8001458:	b942      	cbnz	r2, 800146c <__swsetup_r+0xa4>
 800145a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800145e:	d1c5      	bne.n	80013ec <__swsetup_r+0x24>
 8001460:	bd38      	pop	{r3, r4, r5, pc}
 8001462:	0799      	lsls	r1, r3, #30
 8001464:	bf58      	it	pl
 8001466:	6962      	ldrpl	r2, [r4, #20]
 8001468:	60a2      	str	r2, [r4, #8]
 800146a:	e7f4      	b.n	8001456 <__swsetup_r+0x8e>
 800146c:	2000      	movs	r0, #0
 800146e:	e7f7      	b.n	8001460 <__swsetup_r+0x98>
 8001470:	2000000c 	.word	0x2000000c

08001474 <_sbrk_r>:
 8001474:	b538      	push	{r3, r4, r5, lr}
 8001476:	4d06      	ldr	r5, [pc, #24]	@ (8001490 <_sbrk_r+0x1c>)
 8001478:	2300      	movs	r3, #0
 800147a:	4604      	mov	r4, r0
 800147c:	4608      	mov	r0, r1
 800147e:	602b      	str	r3, [r5, #0]
 8001480:	f7ff f902 	bl	8000688 <_sbrk>
 8001484:	1c43      	adds	r3, r0, #1
 8001486:	d102      	bne.n	800148e <_sbrk_r+0x1a>
 8001488:	682b      	ldr	r3, [r5, #0]
 800148a:	b103      	cbz	r3, 800148e <_sbrk_r+0x1a>
 800148c:	6023      	str	r3, [r4, #0]
 800148e:	bd38      	pop	{r3, r4, r5, pc}
 8001490:	200001c0 	.word	0x200001c0

08001494 <__swhatbuf_r>:
 8001494:	b570      	push	{r4, r5, r6, lr}
 8001496:	460c      	mov	r4, r1
 8001498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800149c:	2900      	cmp	r1, #0
 800149e:	b096      	sub	sp, #88	@ 0x58
 80014a0:	4615      	mov	r5, r2
 80014a2:	461e      	mov	r6, r3
 80014a4:	da0d      	bge.n	80014c2 <__swhatbuf_r+0x2e>
 80014a6:	89a3      	ldrh	r3, [r4, #12]
 80014a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80014ac:	f04f 0100 	mov.w	r1, #0
 80014b0:	bf14      	ite	ne
 80014b2:	2340      	movne	r3, #64	@ 0x40
 80014b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80014b8:	2000      	movs	r0, #0
 80014ba:	6031      	str	r1, [r6, #0]
 80014bc:	602b      	str	r3, [r5, #0]
 80014be:	b016      	add	sp, #88	@ 0x58
 80014c0:	bd70      	pop	{r4, r5, r6, pc}
 80014c2:	466a      	mov	r2, sp
 80014c4:	f000 f848 	bl	8001558 <_fstat_r>
 80014c8:	2800      	cmp	r0, #0
 80014ca:	dbec      	blt.n	80014a6 <__swhatbuf_r+0x12>
 80014cc:	9901      	ldr	r1, [sp, #4]
 80014ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80014d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80014d6:	4259      	negs	r1, r3
 80014d8:	4159      	adcs	r1, r3
 80014da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014de:	e7eb      	b.n	80014b8 <__swhatbuf_r+0x24>

080014e0 <__smakebuf_r>:
 80014e0:	898b      	ldrh	r3, [r1, #12]
 80014e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80014e4:	079d      	lsls	r5, r3, #30
 80014e6:	4606      	mov	r6, r0
 80014e8:	460c      	mov	r4, r1
 80014ea:	d507      	bpl.n	80014fc <__smakebuf_r+0x1c>
 80014ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80014f0:	6023      	str	r3, [r4, #0]
 80014f2:	6123      	str	r3, [r4, #16]
 80014f4:	2301      	movs	r3, #1
 80014f6:	6163      	str	r3, [r4, #20]
 80014f8:	b003      	add	sp, #12
 80014fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014fc:	ab01      	add	r3, sp, #4
 80014fe:	466a      	mov	r2, sp
 8001500:	f7ff ffc8 	bl	8001494 <__swhatbuf_r>
 8001504:	9f00      	ldr	r7, [sp, #0]
 8001506:	4605      	mov	r5, r0
 8001508:	4639      	mov	r1, r7
 800150a:	4630      	mov	r0, r6
 800150c:	f7ff fb1c 	bl	8000b48 <_malloc_r>
 8001510:	b948      	cbnz	r0, 8001526 <__smakebuf_r+0x46>
 8001512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001516:	059a      	lsls	r2, r3, #22
 8001518:	d4ee      	bmi.n	80014f8 <__smakebuf_r+0x18>
 800151a:	f023 0303 	bic.w	r3, r3, #3
 800151e:	f043 0302 	orr.w	r3, r3, #2
 8001522:	81a3      	strh	r3, [r4, #12]
 8001524:	e7e2      	b.n	80014ec <__smakebuf_r+0xc>
 8001526:	89a3      	ldrh	r3, [r4, #12]
 8001528:	6020      	str	r0, [r4, #0]
 800152a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800152e:	81a3      	strh	r3, [r4, #12]
 8001530:	9b01      	ldr	r3, [sp, #4]
 8001532:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001536:	b15b      	cbz	r3, 8001550 <__smakebuf_r+0x70>
 8001538:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800153c:	4630      	mov	r0, r6
 800153e:	f000 f81d 	bl	800157c <_isatty_r>
 8001542:	b128      	cbz	r0, 8001550 <__smakebuf_r+0x70>
 8001544:	89a3      	ldrh	r3, [r4, #12]
 8001546:	f023 0303 	bic.w	r3, r3, #3
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	81a3      	strh	r3, [r4, #12]
 8001550:	89a3      	ldrh	r3, [r4, #12]
 8001552:	431d      	orrs	r5, r3
 8001554:	81a5      	strh	r5, [r4, #12]
 8001556:	e7cf      	b.n	80014f8 <__smakebuf_r+0x18>

08001558 <_fstat_r>:
 8001558:	b538      	push	{r3, r4, r5, lr}
 800155a:	4d07      	ldr	r5, [pc, #28]	@ (8001578 <_fstat_r+0x20>)
 800155c:	2300      	movs	r3, #0
 800155e:	4604      	mov	r4, r0
 8001560:	4608      	mov	r0, r1
 8001562:	4611      	mov	r1, r2
 8001564:	602b      	str	r3, [r5, #0]
 8001566:	f7ff f869 	bl	800063c <_fstat>
 800156a:	1c43      	adds	r3, r0, #1
 800156c:	d102      	bne.n	8001574 <_fstat_r+0x1c>
 800156e:	682b      	ldr	r3, [r5, #0]
 8001570:	b103      	cbz	r3, 8001574 <_fstat_r+0x1c>
 8001572:	6023      	str	r3, [r4, #0]
 8001574:	bd38      	pop	{r3, r4, r5, pc}
 8001576:	bf00      	nop
 8001578:	200001c0 	.word	0x200001c0

0800157c <_isatty_r>:
 800157c:	b538      	push	{r3, r4, r5, lr}
 800157e:	4d06      	ldr	r5, [pc, #24]	@ (8001598 <_isatty_r+0x1c>)
 8001580:	2300      	movs	r3, #0
 8001582:	4604      	mov	r4, r0
 8001584:	4608      	mov	r0, r1
 8001586:	602b      	str	r3, [r5, #0]
 8001588:	f7ff f867 	bl	800065a <_isatty>
 800158c:	1c43      	adds	r3, r0, #1
 800158e:	d102      	bne.n	8001596 <_isatty_r+0x1a>
 8001590:	682b      	ldr	r3, [r5, #0]
 8001592:	b103      	cbz	r3, 8001596 <_isatty_r+0x1a>
 8001594:	6023      	str	r3, [r4, #0]
 8001596:	bd38      	pop	{r3, r4, r5, pc}
 8001598:	200001c0 	.word	0x200001c0

0800159c <_init>:
 800159c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800159e:	bf00      	nop
 80015a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015a2:	bc08      	pop	{r3}
 80015a4:	469e      	mov	lr, r3
 80015a6:	4770      	bx	lr

080015a8 <_fini>:
 80015a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015aa:	bf00      	nop
 80015ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015ae:	bc08      	pop	{r3}
 80015b0:	469e      	mov	lr, r3
 80015b2:	4770      	bx	lr
