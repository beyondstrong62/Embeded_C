
Day18 PWM_NEW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002a8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000480  08000488  00001488  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000480  08000480  00001488  2**0
                  CONTENTS
  4 .ARM          00000000  08000480  08000480  00001488  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000480  08000488  00001488  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000480  08000480  00001480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000484  08000484  00001484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001488  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  00001488  2**0
                  CONTENTS
 10 .bss          00000024  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001488  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000635  00000000  00000000  000014b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000024a  00000000  00000000  00001aed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000a0  00000000  00000000  00001d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000069  00000000  00000000  00001dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000ba10  00000000  00000000  00001e41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000b0d  00000000  00000000  0000d851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0004188e  00000000  00000000  0000e35e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0004fbec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000184  00000000  00000000  0004fc30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  0004fdb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000000 	.word	0x20000000
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08000468 	.word	0x08000468

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000004 	.word	0x20000004
 8000214:	08000468 	.word	0x08000468

08000218 <main>:
void PA5_PWM_Config(void);
void TIM2_PWM_Config(void);
void TIM2_PA5_DutyCycle(uint32_t DutyCycle);
void delay(uint32_t delay);

int main(void) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
    PA5_PWM_Config();
 800021e:	f000 f825 	bl	800026c <PA5_PWM_Config>
    TIM2_PWM_Config();
 8000222:	f000 f84d 	bl	80002c0 <TIM2_PWM_Config>

    while (1) {
        for (int i = 0; i <= 100; i++) {
 8000226:	2300      	movs	r3, #0
 8000228:	607b      	str	r3, [r7, #4]
 800022a:	e00a      	b.n	8000242 <main+0x2a>
            TIM2_PA5_DutyCycle(i);
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	4618      	mov	r0, r3
 8000230:	f000 f882 	bl	8000338 <TIM2_PA5_DutyCycle>
            delay(10000); // Adjust delay for smooth transition
 8000234:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000238:	f000 f898 	bl	800036c <delay>
        for (int i = 0; i <= 100; i++) {
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	3301      	adds	r3, #1
 8000240:	607b      	str	r3, [r7, #4]
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	2b64      	cmp	r3, #100	@ 0x64
 8000246:	ddf1      	ble.n	800022c <main+0x14>
        }
        for (int i = 100; i >= 0; i--) {
 8000248:	2364      	movs	r3, #100	@ 0x64
 800024a:	603b      	str	r3, [r7, #0]
 800024c:	e00a      	b.n	8000264 <main+0x4c>
            TIM2_PA5_DutyCycle(i);
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	4618      	mov	r0, r3
 8000252:	f000 f871 	bl	8000338 <TIM2_PA5_DutyCycle>
            delay(10000); // Adjust delay for smooth transition
 8000256:	f242 7010 	movw	r0, #10000	@ 0x2710
 800025a:	f000 f887 	bl	800036c <delay>
        for (int i = 100; i >= 0; i--) {
 800025e:	683b      	ldr	r3, [r7, #0]
 8000260:	3b01      	subs	r3, #1
 8000262:	603b      	str	r3, [r7, #0]
 8000264:	683b      	ldr	r3, [r7, #0]
 8000266:	2b00      	cmp	r3, #0
 8000268:	daf1      	bge.n	800024e <main+0x36>
        for (int i = 0; i <= 100; i++) {
 800026a:	e7dc      	b.n	8000226 <main+0xe>

0800026c <PA5_PWM_Config>:
        }
    }
}

void PA5_PWM_Config(void) {
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
    // Enable clock for GPIOA
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000270:	4b11      	ldr	r3, [pc, #68]	@ (80002b8 <PA5_PWM_Config+0x4c>)
 8000272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000274:	4a10      	ldr	r2, [pc, #64]	@ (80002b8 <PA5_PWM_Config+0x4c>)
 8000276:	f043 0301 	orr.w	r3, r3, #1
 800027a:	6313      	str	r3, [r2, #48]	@ 0x30

    // Set PA5 to alternate function mode (AF1)
    GPIOA->MODER &= ~(3UL << (5 * 2));  // Clear mode bits for PA5
 800027c:	4b0f      	ldr	r3, [pc, #60]	@ (80002bc <PA5_PWM_Config+0x50>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a0e      	ldr	r2, [pc, #56]	@ (80002bc <PA5_PWM_Config+0x50>)
 8000282:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000286:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (2UL << (5 * 2));   // Set PA5 to alternate function mode
 8000288:	4b0c      	ldr	r3, [pc, #48]	@ (80002bc <PA5_PWM_Config+0x50>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a0b      	ldr	r2, [pc, #44]	@ (80002bc <PA5_PWM_Config+0x50>)
 800028e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000292:	6013      	str	r3, [r2, #0]

    // Set AF1 for PA5
    GPIOA->AFR[0] &= ~(0xF << (5 * 4)); // Clear AF bits for PA5
 8000294:	4b09      	ldr	r3, [pc, #36]	@ (80002bc <PA5_PWM_Config+0x50>)
 8000296:	6a1b      	ldr	r3, [r3, #32]
 8000298:	4a08      	ldr	r2, [pc, #32]	@ (80002bc <PA5_PWM_Config+0x50>)
 800029a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800029e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (1 << (5 * 4));    // Set AF1 for PA5
 80002a0:	4b06      	ldr	r3, [pc, #24]	@ (80002bc <PA5_PWM_Config+0x50>)
 80002a2:	6a1b      	ldr	r3, [r3, #32]
 80002a4:	4a05      	ldr	r2, [pc, #20]	@ (80002bc <PA5_PWM_Config+0x50>)
 80002a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002aa:	6213      	str	r3, [r2, #32]
}
 80002ac:	bf00      	nop
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	40023800 	.word	0x40023800
 80002bc:	40020000 	.word	0x40020000

080002c0 <TIM2_PWM_Config>:

void TIM2_PWM_Config(void) {
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
    // Enable clock for Timer 2
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80002c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000334 <TIM2_PWM_Config+0x74>)
 80002c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002c8:	4a1a      	ldr	r2, [pc, #104]	@ (8000334 <TIM2_PWM_Config+0x74>)
 80002ca:	f043 0301 	orr.w	r3, r3, #1
 80002ce:	6413      	str	r3, [r2, #64]	@ 0x40

    // Set the auto-reload register value
    TIM2->ARR = 999; // Assuming 1kHz PWM frequency with a 1MHz timer clock
 80002d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002d4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80002d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Set PWM mode 1 and enable preload for TIM2->CCR1
    TIM2->CCMR1 &= ~TIM_CCMR1_OC1M; // Clear the OC1M bits
 80002da:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80002e8:	6193      	str	r3, [r2, #24]
    TIM2->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2; // Set PWM mode 1
 80002ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002f4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80002f8:	6193      	str	r3, [r2, #24]
    TIM2->CCMR1 |= TIM_CCMR1_OC1PE; // Enable preload for TIM2->CCR1
 80002fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000304:	f043 0308 	orr.w	r3, r3, #8
 8000308:	6193      	str	r3, [r2, #24]

    // Enable the output for channel 1
    TIM2->CCER |= TIM_CCER_CC1E;
 800030a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800030e:	6a1b      	ldr	r3, [r3, #32]
 8000310:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000314:	f043 0301 	orr.w	r3, r3, #1
 8000318:	6213      	str	r3, [r2, #32]

    // Start Timer 2
    TIM2->CR1 |= TIM_CR1_CEN;
 800031a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000324:	f043 0301 	orr.w	r3, r3, #1
 8000328:	6013      	str	r3, [r2, #0]
}
 800032a:	bf00      	nop
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr
 8000334:	40023800 	.word	0x40023800

08000338 <TIM2_PA5_DutyCycle>:

void TIM2_PA5_DutyCycle(uint32_t DutyCycle) {
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
    // Set the duty cycle
    TIM2->CCR1 = (DutyCycle * TIM2->ARR) / 100;
 8000340:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000346:	687a      	ldr	r2, [r7, #4]
 8000348:	fb02 f303 	mul.w	r3, r2, r3
 800034c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000350:	4905      	ldr	r1, [pc, #20]	@ (8000368 <TIM2_PA5_DutyCycle+0x30>)
 8000352:	fba1 1303 	umull	r1, r3, r1, r3
 8000356:	095b      	lsrs	r3, r3, #5
 8000358:	6353      	str	r3, [r2, #52]	@ 0x34
}
 800035a:	bf00      	nop
 800035c:	370c      	adds	r7, #12
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	51eb851f 	.word	0x51eb851f

0800036c <delay>:

void delay(uint32_t delay) {
 800036c:	b480      	push	{r7}
 800036e:	b085      	sub	sp, #20
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
    // Simple delay loop
    for (uint32_t i = 0; i < delay; i++) {
 8000374:	2300      	movs	r3, #0
 8000376:	60fb      	str	r3, [r7, #12]
 8000378:	e003      	b.n	8000382 <delay+0x16>
        __asm("NOP");
 800037a:	bf00      	nop
    for (uint32_t i = 0; i < delay; i++) {
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	3301      	adds	r3, #1
 8000380:	60fb      	str	r3, [r7, #12]
 8000382:	68fa      	ldr	r2, [r7, #12]
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	429a      	cmp	r2, r3
 8000388:	d3f7      	bcc.n	800037a <delay+0xe>
    }
}
 800038a:	bf00      	nop
 800038c:	bf00      	nop
 800038e:	3714      	adds	r7, #20
 8000390:	46bd      	mov	sp, r7
 8000392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000396:	4770      	bx	lr

08000398 <SysTick_Handler>:
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
                    SysTick_CTRL_TICKINT_Msk |
                    SysTick_CTRL_ENABLE_Msk;
}

void SysTick_Handler(){
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
    if (ms_counter) ms_counter--;
 800039c:	4b09      	ldr	r3, [pc, #36]	@ (80003c4 <SysTick_Handler+0x2c>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d004      	beq.n	80003ae <SysTick_Handler+0x16>
 80003a4:	4b07      	ldr	r3, [pc, #28]	@ (80003c4 <SysTick_Handler+0x2c>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	3b01      	subs	r3, #1
 80003aa:	4a06      	ldr	r2, [pc, #24]	@ (80003c4 <SysTick_Handler+0x2c>)
 80003ac:	6013      	str	r3, [r2, #0]
    millis++;
 80003ae:	4b06      	ldr	r3, [pc, #24]	@ (80003c8 <SysTick_Handler+0x30>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	3301      	adds	r3, #1
 80003b4:	4a04      	ldr	r2, [pc, #16]	@ (80003c8 <SysTick_Handler+0x30>)
 80003b6:	6013      	str	r3, [r2, #0]
}
 80003b8:	bf00      	nop
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	2000001c 	.word	0x2000001c
 80003c8:	20000020 	.word	0x20000020

080003cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003cc:	480d      	ldr	r0, [pc, #52]	@ (8000404 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003d0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003d4:	480c      	ldr	r0, [pc, #48]	@ (8000408 <LoopForever+0x6>)
  ldr r1, =_edata
 80003d6:	490d      	ldr	r1, [pc, #52]	@ (800040c <LoopForever+0xa>)
  ldr r2, =_sidata
 80003d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000410 <LoopForever+0xe>)
  movs r3, #0
 80003da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003dc:	e002      	b.n	80003e4 <LoopCopyDataInit>

080003de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003e2:	3304      	adds	r3, #4

080003e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003e8:	d3f9      	bcc.n	80003de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000414 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003ec:	4c0a      	ldr	r4, [pc, #40]	@ (8000418 <LoopForever+0x16>)
  movs r3, #0
 80003ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003f0:	e001      	b.n	80003f6 <LoopFillZerobss>

080003f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003f4:	3204      	adds	r2, #4

080003f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003f8:	d3fb      	bcc.n	80003f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003fa:	f000 f811 	bl	8000420 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003fe:	f7ff ff0b 	bl	8000218 <main>

08000402 <LoopForever>:

LoopForever:
  b LoopForever
 8000402:	e7fe      	b.n	8000402 <LoopForever>
  ldr   r0, =_estack
 8000404:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800040c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000410:	08000488 	.word	0x08000488
  ldr r2, =_sbss
 8000414:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000418:	20000024 	.word	0x20000024

0800041c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800041c:	e7fe      	b.n	800041c <ADC1_2_IRQHandler>
	...

08000420 <__libc_init_array>:
 8000420:	b570      	push	{r4, r5, r6, lr}
 8000422:	4d0d      	ldr	r5, [pc, #52]	@ (8000458 <__libc_init_array+0x38>)
 8000424:	4c0d      	ldr	r4, [pc, #52]	@ (800045c <__libc_init_array+0x3c>)
 8000426:	1b64      	subs	r4, r4, r5
 8000428:	10a4      	asrs	r4, r4, #2
 800042a:	2600      	movs	r6, #0
 800042c:	42a6      	cmp	r6, r4
 800042e:	d109      	bne.n	8000444 <__libc_init_array+0x24>
 8000430:	4d0b      	ldr	r5, [pc, #44]	@ (8000460 <__libc_init_array+0x40>)
 8000432:	4c0c      	ldr	r4, [pc, #48]	@ (8000464 <__libc_init_array+0x44>)
 8000434:	f000 f818 	bl	8000468 <_init>
 8000438:	1b64      	subs	r4, r4, r5
 800043a:	10a4      	asrs	r4, r4, #2
 800043c:	2600      	movs	r6, #0
 800043e:	42a6      	cmp	r6, r4
 8000440:	d105      	bne.n	800044e <__libc_init_array+0x2e>
 8000442:	bd70      	pop	{r4, r5, r6, pc}
 8000444:	f855 3b04 	ldr.w	r3, [r5], #4
 8000448:	4798      	blx	r3
 800044a:	3601      	adds	r6, #1
 800044c:	e7ee      	b.n	800042c <__libc_init_array+0xc>
 800044e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000452:	4798      	blx	r3
 8000454:	3601      	adds	r6, #1
 8000456:	e7f2      	b.n	800043e <__libc_init_array+0x1e>
 8000458:	08000480 	.word	0x08000480
 800045c:	08000480 	.word	0x08000480
 8000460:	08000480 	.word	0x08000480
 8000464:	08000484 	.word	0x08000484

08000468 <_init>:
 8000468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046a:	bf00      	nop
 800046c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800046e:	bc08      	pop	{r3}
 8000470:	469e      	mov	lr, r3
 8000472:	4770      	bx	lr

08000474 <_fini>:
 8000474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000476:	bf00      	nop
 8000478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800047a:	bc08      	pop	{r3}
 800047c:	469e      	mov	lr, r3
 800047e:	4770      	bx	lr
